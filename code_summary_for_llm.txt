--- 文件路径 (File Path): ./web/index.html ---

<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>XTrafficDash</title>
  <!-- Favicon -->
  <link rel="icon" type="image/svg+xml" href="/favicon.svg">
  <link rel="manifest" href="/site.webmanifest">
  <meta name="theme-color" content="#3A77D9">
</head>
<body>
  <div id="app"></div>
  <script type="module" src="/src/main.js"></script>
</body>
</html> 
--- 文件内容结束 (End of Content) ---

--- 文件路径 (File Path): ./web/vite.config.js ---

import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import { resolve } from 'path'

export default defineConfig({
  plugins: [vue()],
  resolve: {
    alias: {
      '@': resolve(__dirname, 'src')
    }
  },
  server: {
    port: 3000,
    proxy: {
      '/api': {
        target: 'http://localhost:37022',
        changeOrigin: true
      }
    }
  },
  build: {
    outDir: 'dist',
    assetsDir: 'assets',
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['vue', 'vue-router', 'pinia'],
          chart: ['chart.js', 'vue-chartjs']
        }
      }
    }
  },
  optimizeDeps: {
    include: ['vue', 'vue-router', 'pinia', 'axios']
  }
}) 
--- 文件内容结束 (End of Content) ---

--- 文件路径 (File Path): ./web/package-lock.json ---

{
  "name": "XTrafficDash",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "XTrafficDash",
      "version": "1.0.0",
      "dependencies": {
        "axios": "^1.6.0",
        "chart.js": "^4.4.0",
        "pinia": "^2.1.0",
        "vue": "^3.4.0",
        "vue-chartjs": "^5.2.0",
        "vue-router": "^4.2.0"
      },
      "devDependencies": {
        "@vitejs/plugin-vue": "^5.0.0",
        "vite": "^6.0.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.27.1",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.27.1",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.28.0",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.0"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.28.1",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@esbuild/aix-ppc64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.25.8.tgz",
      "integrity": "sha512-urAvrUedIqEiFR3FYSLTWQgLu5tb+m0qZw0NBEasUeo6wuqatkMDaRT+1uABiGXEu5vqgPd7FGE1BhsAIy9QVA==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "aix"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.25.8.tgz",
      "integrity": "sha512-RONsAvGCz5oWyePVnLdZY/HHwA++nxYWIX1atInlaW6SEkwq6XkP3+cb825EUcRs5Vss/lGh/2YxAb5xqc07Uw==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-arm64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.25.8.tgz",
      "integrity": "sha512-OD3p7LYzWpLhZEyATcTSJ67qB5D+20vbtr6vHlHWSQYhKtzUYrETuWThmzFpZtFsBIxRvhO07+UgVA9m0i/O1w==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/android-x64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.25.8.tgz",
      "integrity": "sha512-yJAVPklM5+4+9dTeKwHOaA+LQkmrKFX96BM0A/2zQrbS6ENCmxc4OVoBs5dPkCCak2roAD+jKCdnmOqKszPkjA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-arm64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.25.8.tgz",
      "integrity": "sha512-Jw0mxgIaYX6R8ODrdkLLPwBqHTtYHJSmzzd+QeytSugzQ0Vg4c5rDky5VgkoowbZQahCbsv1rT1KW72MPIkevw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/darwin-x64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.25.8.tgz",
      "integrity": "sha512-Vh2gLxxHnuoQ+GjPNvDSDRpoBCUzY4Pu0kBqMBDlK4fuWbKgGtmDIeEC081xi26PPjn+1tct+Bh8FjyLlw1Zlg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-arm64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.25.8.tgz",
      "integrity": "sha512-YPJ7hDQ9DnNe5vxOm6jaie9QsTwcKedPvizTVlqWG9GBSq+BuyWEDazlGaDTC5NGU4QJd666V0yqCBL2oWKPfA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/freebsd-x64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.25.8.tgz",
      "integrity": "sha512-MmaEXxQRdXNFsRN/KcIimLnSJrk2r5H8v+WVafRWz5xdSVmWLoITZQXcgehI2ZE6gioE6HirAEToM/RvFBeuhw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.25.8.tgz",
      "integrity": "sha512-FuzEP9BixzZohl1kLf76KEVOsxtIBFwCaLupVuk4eFVnOZfU+Wsn+x5Ryam7nILV2pkq2TqQM9EZPsOBuMC+kg==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-arm64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.25.8.tgz",
      "integrity": "sha512-WIgg00ARWv/uYLU7lsuDK00d/hHSfES5BzdWAdAig1ioV5kaFNrtK8EqGcUBJhYqotlUByUKz5Qo6u8tt7iD/w==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ia32": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.25.8.tgz",
      "integrity": "sha512-A1D9YzRX1i+1AJZuFFUMP1E9fMaYY+GnSQil9Tlw05utlE86EKTUA7RjwHDkEitmLYiFsRd9HwKBPEftNdBfjg==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-loong64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.25.8.tgz",
      "integrity": "sha512-O7k1J/dwHkY1RMVvglFHl1HzutGEFFZ3kNiDMSOyUrB7WcoHGf96Sh+64nTRT26l3GMbCW01Ekh/ThKM5iI7hQ==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-mips64el": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.25.8.tgz",
      "integrity": "sha512-uv+dqfRazte3BzfMp8PAQXmdGHQt2oC/y2ovwpTteqrMx2lwaksiFZ/bdkXJC19ttTvNXBuWH53zy/aTj1FgGw==",
      "cpu": [
        "mips64el"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-ppc64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.25.8.tgz",
      "integrity": "sha512-GyG0KcMi1GBavP5JgAkkstMGyMholMDybAf8wF5A70CALlDM2p/f7YFE7H92eDeH/VBtFJA5MT4nRPDGg4JuzQ==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-riscv64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.25.8.tgz",
      "integrity": "sha512-rAqDYFv3yzMrq7GIcen3XP7TUEG/4LK86LUPMIz6RT8A6pRIDn0sDcvjudVZBiiTcZCY9y2SgYX2lgK3AF+1eg==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-s390x": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.25.8.tgz",
      "integrity": "sha512-Xutvh6VjlbcHpsIIbwY8GVRbwoviWT19tFhgdA7DlenLGC/mbc3lBoVb7jxj9Z+eyGqvcnSyIltYUrkKzWqSvg==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/linux-x64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.25.8.tgz",
      "integrity": "sha512-ASFQhgY4ElXh3nDcOMTkQero4b1lgubskNlhIfJrsH5OKZXDpUAKBlNS0Kx81jwOBp+HCeZqmoJuihTv57/jvQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-arm64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-arm64/-/netbsd-arm64-0.25.8.tgz",
      "integrity": "sha512-d1KfruIeohqAi6SA+gENMuObDbEjn22olAR7egqnkCD9DGBG0wsEARotkLgXDu6c4ncgWTZJtN5vcgxzWRMzcw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/netbsd-x64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.25.8.tgz",
      "integrity": "sha512-nVDCkrvx2ua+XQNyfrujIG38+YGyuy2Ru9kKVNyh5jAys6n+l44tTtToqHjino2My8VAY6Lw9H7RI73XFi66Cg==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "netbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-arm64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-arm64/-/openbsd-arm64-0.25.8.tgz",
      "integrity": "sha512-j8HgrDuSJFAujkivSMSfPQSAa5Fxbvk4rgNAS5i3K+r8s1X0p1uOO2Hl2xNsGFppOeHOLAVgYwDVlmxhq5h+SQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openbsd-x64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.25.8.tgz",
      "integrity": "sha512-1h8MUAwa0VhNCDp6Af0HToI2TJFAn1uqT9Al6DJVzdIBAd21m/G0Yfc77KDM3uF3T/YaOgQq3qTJHPbTOInaIQ==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openbsd"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/openharmony-arm64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/openharmony-arm64/-/openharmony-arm64-0.25.8.tgz",
      "integrity": "sha512-r2nVa5SIK9tSWd0kJd9HCffnDHKchTGikb//9c7HX+r+wHYCpQrSgxhlY6KWV1nFo1l4KFbsMlHk+L6fekLsUg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "openharmony"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/sunos-x64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.25.8.tgz",
      "integrity": "sha512-zUlaP2S12YhQ2UzUfcCuMDHQFJyKABkAjvO5YSndMiIkMimPmxA+BYSBikWgsRpvyxuRnow4nS5NPnf9fpv41w==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "sunos"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-arm64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.25.8.tgz",
      "integrity": "sha512-YEGFFWESlPva8hGL+zvj2z/SaK+pH0SwOM0Nc/d+rVnW7GSTFlLBGzZkuSU9kFIGIo8q9X3ucpZhu8PDN5A2sQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-ia32": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.25.8.tgz",
      "integrity": "sha512-hiGgGC6KZ5LZz58OL/+qVVoZiuZlUYlYHNAmczOm7bs2oE1XriPFi5ZHHrS8ACpV5EjySrnoCKmcbQMN+ojnHg==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@esbuild/win32-x64": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.25.8.tgz",
      "integrity": "sha512-cn3Yr7+OaaZq1c+2pe+8yxC8E144SReCQjN6/2ynubzYjvyqZjTXfQJpAcQpsdJq3My7XADANiYGHoFC69pLQw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.4",
      "license": "MIT"
    },
    "node_modules/@kurkle/color": {
      "version": "0.3.4",
      "license": "MIT"
    },
    "node_modules/@rollup/rollup-android-arm-eabi": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.45.1.tgz",
      "integrity": "sha512-NEySIFvMY0ZQO+utJkgoMiCAjMrGvnbDLHvcmlA33UXJpYBCvlBEbMMtV837uCkS+plG2umfhn0T5mMAxGrlRA==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-android-arm64": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.45.1.tgz",
      "integrity": "sha512-ujQ+sMXJkg4LRJaYreaVx7Z/VMgBBd89wGS4qMrdtfUFZ+TSY5Rs9asgjitLwzeIbhwdEhyj29zhst3L1lKsRQ==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "android"
      ]
    },
    "node_modules/@rollup/rollup-darwin-arm64": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.45.1.tgz",
      "integrity": "sha512-FSncqHvqTm3lC6Y13xncsdOYfxGSLnP+73k815EfNmpewPs+EyM49haPS105Rh4aF5mJKywk9X0ogzLXZzN9lA==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-darwin-x64": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.45.1.tgz",
      "integrity": "sha512-2/vVn/husP5XI7Fsf/RlhDaQJ7x9zjvC81anIVbr4b/f0xtSmXQTFcGIQ/B1cXIYM6h2nAhJkdMHTnD7OtQ9Og==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-arm64": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-arm64/-/rollup-freebsd-arm64-4.45.1.tgz",
      "integrity": "sha512-4g1kaDxQItZsrkVTdYQ0bxu4ZIQ32cotoQbmsAnW1jAE4XCMbcBPDirX5fyUzdhVCKgPcrwWuucI8yrVRBw2+g==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-freebsd-x64": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-freebsd-x64/-/rollup-freebsd-x64-4.45.1.tgz",
      "integrity": "sha512-L/6JsfiL74i3uK1Ti2ZFSNsp5NMiM4/kbbGEcOCps99aZx3g8SJMO1/9Y0n/qKlWZfn6sScf98lEOUe2mBvW9A==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "freebsd"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.45.1.tgz",
      "integrity": "sha512-RkdOTu2jK7brlu+ZwjMIZfdV2sSYHK2qR08FUWcIoqJC2eywHbXr0L8T/pONFwkGukQqERDheaGTeedG+rra6Q==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm-musleabihf": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-musleabihf/-/rollup-linux-arm-musleabihf-4.45.1.tgz",
      "integrity": "sha512-3kJ8pgfBt6CIIr1o+HQA7OZ9mp/zDk3ctekGl9qn/pRBgrRgfwiffaUmqioUGN9hv0OHv2gxmvdKOkARCtRb8Q==",
      "cpu": [
        "arm"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-gnu": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.45.1.tgz",
      "integrity": "sha512-k3dOKCfIVixWjG7OXTCOmDfJj3vbdhN0QYEqB+OuGArOChek22hn7Uy5A/gTDNAcCy5v2YcXRJ/Qcnm4/ma1xw==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-arm64-musl": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.45.1.tgz",
      "integrity": "sha512-PmI1vxQetnM58ZmDFl9/Uk2lpBBby6B6rF4muJc65uZbxCs0EA7hhKCk2PKlmZKuyVSHAyIw3+/SiuMLxKxWog==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-loongarch64-gnu": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-loongarch64-gnu/-/rollup-linux-loongarch64-gnu-4.45.1.tgz",
      "integrity": "sha512-9UmI0VzGmNJ28ibHW2GpE2nF0PBQqsyiS4kcJ5vK+wuwGnV5RlqdczVocDSUfGX/Na7/XINRVoUgJyFIgipoRg==",
      "cpu": [
        "loong64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-powerpc64le-gnu": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-powerpc64le-gnu/-/rollup-linux-powerpc64le-gnu-4.45.1.tgz",
      "integrity": "sha512-7nR2KY8oEOUTD3pBAxIBBbZr0U7U+R9HDTPNy+5nVVHDXI4ikYniH1oxQz9VoB5PbBU1CZuDGHkLJkd3zLMWsg==",
      "cpu": [
        "ppc64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-gnu": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.45.1.tgz",
      "integrity": "sha512-nlcl3jgUultKROfZijKjRQLUu9Ma0PeNv/VFHkZiKbXTBQXhpytS8CIj5/NfBeECZtY2FJQubm6ltIxm/ftxpw==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-riscv64-musl": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-musl/-/rollup-linux-riscv64-musl-4.45.1.tgz",
      "integrity": "sha512-HJV65KLS51rW0VY6rvZkiieiBnurSzpzore1bMKAhunQiECPuxsROvyeaot/tcK3A3aGnI+qTHqisrpSgQrpgA==",
      "cpu": [
        "riscv64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-s390x-gnu": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-s390x-gnu/-/rollup-linux-s390x-gnu-4.45.1.tgz",
      "integrity": "sha512-NITBOCv3Qqc6hhwFt7jLV78VEO/il4YcBzoMGGNxznLgRQf43VQDae0aAzKiBeEPIxnDrACiMgbqjuihx08OOw==",
      "cpu": [
        "s390x"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-gnu": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.45.1.tgz",
      "integrity": "sha512-+E/lYl6qu1zqgPEnTrs4WysQtvc/Sh4fC2nByfFExqgYrqkKWp1tWIbe+ELhixnenSpBbLXNi6vbEEJ8M7fiHw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-linux-x64-musl": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.45.1.tgz",
      "integrity": "sha512-a6WIAp89p3kpNoYStITT9RbTbTnqarU7D8N8F2CV+4Cl9fwCOZraLVuVFvlpsW0SbIiYtEnhCZBPLoNdRkjQFw==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "linux"
      ]
    },
    "node_modules/@rollup/rollup-win32-arm64-msvc": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.45.1.tgz",
      "integrity": "sha512-T5Bi/NS3fQiJeYdGvRpTAP5P02kqSOpqiopwhj0uaXB6nzs5JVi2XMJb18JUSKhCOX8+UE1UKQufyD6Or48dJg==",
      "cpu": [
        "arm64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-ia32-msvc": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.45.1.tgz",
      "integrity": "sha512-lxV2Pako3ujjuUe9jiU3/s7KSrDfH6IgTSQOnDWr9aJ92YsFd7EurmClK0ly/t8dzMkDtd04g60WX6yl0sGfdw==",
      "cpu": [
        "ia32"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@rollup/rollup-win32-x64-msvc": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.45.1.tgz",
      "integrity": "sha512-M/fKi4sasCdM8i0aWJjCSFm2qEnYRR8AMLG2kxp6wD13+tMGA4Z1tVAuHkNRjud5SW2EM3naLuK35w9twvf6aA==",
      "cpu": [
        "x64"
      ],
      "dev": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "win32"
      ]
    },
    "node_modules/@types/estree": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-1.0.8.tgz",
      "integrity": "sha512-dWHzHa2WqEXI/O1E9OjrocMTKJl2mSrEolh1Iomrv6U+JuNwaHXsXx9bLu5gG7BUWFIN0skIQJQ/L1rIex4X6w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@vitejs/plugin-vue": {
      "version": "5.2.4",
      "resolved": "https://registry.npmjs.org/@vitejs/plugin-vue/-/plugin-vue-5.2.4.tgz",
      "integrity": "sha512-7Yx/SXSOcQq5HiiV3orevHUFn+pmMB4cgbEkDYgnkUWb0WfeQ/wa2yFv6D5ICiCQOVpjA7vYDXrC7AGO8yjDHA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^18.0.0 || >=20.0.0"
      },
      "peerDependencies": {
        "vite": "^5.0.0 || ^6.0.0",
        "vue": "^3.2.25"
      }
    },
    "node_modules/@vue/compiler-core": {
      "version": "3.5.17",
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.27.5",
        "@vue/shared": "3.5.17",
        "entities": "^4.5.0",
        "estree-walker": "^2.0.2",
        "source-map-js": "^1.2.1"
      }
    },
    "node_modules/@vue/compiler-dom": {
      "version": "3.5.17",
      "license": "MIT",
      "dependencies": {
        "@vue/compiler-core": "3.5.17",
        "@vue/shared": "3.5.17"
      }
    },
    "node_modules/@vue/compiler-sfc": {
      "version": "3.5.17",
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.27.5",
        "@vue/compiler-core": "3.5.17",
        "@vue/compiler-dom": "3.5.17",
        "@vue/compiler-ssr": "3.5.17",
        "@vue/shared": "3.5.17",
        "estree-walker": "^2.0.2",
        "magic-string": "^0.30.17",
        "postcss": "^8.5.6",
        "source-map-js": "^1.2.1"
      }
    },
    "node_modules/@vue/compiler-ssr": {
      "version": "3.5.17",
      "license": "MIT",
      "dependencies": {
        "@vue/compiler-dom": "3.5.17",
        "@vue/shared": "3.5.17"
      }
    },
    "node_modules/@vue/devtools-api": {
      "version": "6.6.4",
      "license": "MIT"
    },
    "node_modules/@vue/reactivity": {
      "version": "3.5.17",
      "license": "MIT",
      "dependencies": {
        "@vue/shared": "3.5.17"
      }
    },
    "node_modules/@vue/runtime-core": {
      "version": "3.5.17",
      "license": "MIT",
      "dependencies": {
        "@vue/reactivity": "3.5.17",
        "@vue/shared": "3.5.17"
      }
    },
    "node_modules/@vue/runtime-dom": {
      "version": "3.5.17",
      "license": "MIT",
      "dependencies": {
        "@vue/reactivity": "3.5.17",
        "@vue/runtime-core": "3.5.17",
        "@vue/shared": "3.5.17",
        "csstype": "^3.1.3"
      }
    },
    "node_modules/@vue/server-renderer": {
      "version": "3.5.17",
      "license": "MIT",
      "dependencies": {
        "@vue/compiler-ssr": "3.5.17",
        "@vue/shared": "3.5.17"
      },
      "peerDependencies": {
        "vue": "3.5.17"
      }
    },
    "node_modules/@vue/shared": {
      "version": "3.5.17",
      "license": "MIT"
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "license": "MIT"
    },
    "node_modules/axios": {
      "version": "1.10.0",
      "license": "MIT",
      "dependencies": {
        "follow-redirects": "^1.15.6",
        "form-data": "^4.0.0",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/chart.js": {
      "version": "4.5.0",
      "license": "MIT",
      "dependencies": {
        "@kurkle/color": "^0.3.0"
      },
      "engines": {
        "pnpm": ">=8"
      }
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "license": "MIT",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.3",
      "license": "MIT"
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/entities": {
      "version": "4.5.0",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.12"
      },
      "funding": {
        "url": "https://github.com/fb55/entities?sponsor=1"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.1.0",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/esbuild": {
      "version": "0.25.8",
      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.25.8.tgz",
      "integrity": "sha512-vVC0USHGtMi8+R4Kz8rt6JhEWLxsv9Rnu/lGYbPR8u47B+DCBksq9JarW0zOO7bs37hyOK1l2/oqtbciutL5+Q==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "bin": {
        "esbuild": "bin/esbuild"
      },
      "engines": {
        "node": ">=18"
      },
      "optionalDependencies": {
        "@esbuild/aix-ppc64": "0.25.8",
        "@esbuild/android-arm": "0.25.8",
        "@esbuild/android-arm64": "0.25.8",
        "@esbuild/android-x64": "0.25.8",
        "@esbuild/darwin-arm64": "0.25.8",
        "@esbuild/darwin-x64": "0.25.8",
        "@esbuild/freebsd-arm64": "0.25.8",
        "@esbuild/freebsd-x64": "0.25.8",
        "@esbuild/linux-arm": "0.25.8",
        "@esbuild/linux-arm64": "0.25.8",
        "@esbuild/linux-ia32": "0.25.8",
        "@esbuild/linux-loong64": "0.25.8",
        "@esbuild/linux-mips64el": "0.25.8",
        "@esbuild/linux-ppc64": "0.25.8",
        "@esbuild/linux-riscv64": "0.25.8",
        "@esbuild/linux-s390x": "0.25.8",
        "@esbuild/linux-x64": "0.25.8",
        "@esbuild/netbsd-arm64": "0.25.8",
        "@esbuild/netbsd-x64": "0.25.8",
        "@esbuild/openbsd-arm64": "0.25.8",
        "@esbuild/openbsd-x64": "0.25.8",
        "@esbuild/openharmony-arm64": "0.25.8",
        "@esbuild/sunos-x64": "0.25.8",
        "@esbuild/win32-arm64": "0.25.8",
        "@esbuild/win32-ia32": "0.25.8",
        "@esbuild/win32-x64": "0.25.8"
      }
    },
    "node_modules/estree-walker": {
      "version": "2.0.2",
      "license": "MIT"
    },
    "node_modules/fdir": {
      "version": "6.4.6",
      "resolved": "https://registry.npmjs.org/fdir/-/fdir-6.4.6.tgz",
      "integrity": "sha512-hiFoqpyZcfNm1yc4u8oWCf9A2c4D3QjCrks3zmoVKVxpQRzmPNar1hUJcBG2RQHvEVGDN+Jm81ZheVLAQMK6+w==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "picomatch": "^3 || ^4"
      },
      "peerDependenciesMeta": {
        "picomatch": {
          "optional": true
        }
      }
    },
    "node_modules/follow-redirects": {
      "version": "1.15.9",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/form-data": {
      "version": "4.0.4",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "es-set-tostringtag": "^2.1.0",
        "hasown": "^2.0.2",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/magic-string": {
      "version": "0.30.17",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.0"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/nanoid": {
      "version": "3.3.11",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "license": "ISC"
    },
    "node_modules/picomatch": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.3.tgz",
      "integrity": "sha512-5gTmgEY/sqK6gFXLIsQNH19lWb4ebPDLA4SdLP7dsWkIXHWlG66oPuVvXSGFPppYZz8ZDZq0dYYrbHfBCVUb1Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pinia": {
      "version": "2.3.1",
      "license": "MIT",
      "dependencies": {
        "@vue/devtools-api": "^6.6.3",
        "vue-demi": "^0.14.10"
      },
      "funding": {
        "url": "https://github.com/sponsors/posva"
      },
      "peerDependencies": {
        "typescript": ">=4.4.4",
        "vue": "^2.7.0 || ^3.5.11"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/postcss": {
      "version": "8.5.6",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.11",
        "picocolors": "^1.1.1",
        "source-map-js": "^1.2.1"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "license": "MIT"
    },
    "node_modules/rollup": {
      "version": "4.45.1",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.45.1.tgz",
      "integrity": "sha512-4iya7Jb76fVpQyLoiVpzUrsjQ12r3dM7fIVz+4NwoYvZOShknRmiv+iu9CClZml5ZLGb0XMcYLutK6w9tgxHDw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/estree": "1.0.8"
      },
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=18.0.0",
        "npm": ">=8.0.0"
      },
      "optionalDependencies": {
        "@rollup/rollup-android-arm-eabi": "4.45.1",
        "@rollup/rollup-android-arm64": "4.45.1",
        "@rollup/rollup-darwin-arm64": "4.45.1",
        "@rollup/rollup-darwin-x64": "4.45.1",
        "@rollup/rollup-freebsd-arm64": "4.45.1",
        "@rollup/rollup-freebsd-x64": "4.45.1",
        "@rollup/rollup-linux-arm-gnueabihf": "4.45.1",
        "@rollup/rollup-linux-arm-musleabihf": "4.45.1",
        "@rollup/rollup-linux-arm64-gnu": "4.45.1",
        "@rollup/rollup-linux-arm64-musl": "4.45.1",
        "@rollup/rollup-linux-loongarch64-gnu": "4.45.1",
        "@rollup/rollup-linux-powerpc64le-gnu": "4.45.1",
        "@rollup/rollup-linux-riscv64-gnu": "4.45.1",
        "@rollup/rollup-linux-riscv64-musl": "4.45.1",
        "@rollup/rollup-linux-s390x-gnu": "4.45.1",
        "@rollup/rollup-linux-x64-gnu": "4.45.1",
        "@rollup/rollup-linux-x64-musl": "4.45.1",
        "@rollup/rollup-win32-arm64-msvc": "4.45.1",
        "@rollup/rollup-win32-ia32-msvc": "4.45.1",
        "@rollup/rollup-win32-x64-msvc": "4.45.1",
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.2.1",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/tinyglobby": {
      "version": "0.2.14",
      "resolved": "https://registry.npmjs.org/tinyglobby/-/tinyglobby-0.2.14.tgz",
      "integrity": "sha512-tX5e7OM1HnYr2+a2C/4V0htOcSQcoSTH9KgJnVvNm5zm/cyEWKJ7j7YutsH9CxMdtOkkLFy2AHrMci9IM8IPZQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fdir": "^6.4.4",
        "picomatch": "^4.0.2"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/SuperchupuDev"
      }
    },
    "node_modules/vite": {
      "version": "6.3.5",
      "resolved": "https://registry.npmjs.org/vite/-/vite-6.3.5.tgz",
      "integrity": "sha512-cZn6NDFE7wdTpINgs++ZJ4N49W2vRp8LCKrn3Ob1kYNtOo21vfDoaV5GzBfLU4MovSAB8uNRm4jgzVQZ+mBzPQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "esbuild": "^0.25.0",
        "fdir": "^6.4.4",
        "picomatch": "^4.0.2",
        "postcss": "^8.5.3",
        "rollup": "^4.34.9",
        "tinyglobby": "^0.2.13"
      },
      "bin": {
        "vite": "bin/vite.js"
      },
      "engines": {
        "node": "^18.0.0 || ^20.0.0 || >=22.0.0"
      },
      "funding": {
        "url": "https://github.com/vitejs/vite?sponsor=1"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.3"
      },
      "peerDependencies": {
        "@types/node": "^18.0.0 || ^20.0.0 || >=22.0.0",
        "jiti": ">=1.21.0",
        "less": "*",
        "lightningcss": "^1.21.0",
        "sass": "*",
        "sass-embedded": "*",
        "stylus": "*",
        "sugarss": "*",
        "terser": "^5.16.0",
        "tsx": "^4.8.1",
        "yaml": "^2.4.2"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "jiti": {
          "optional": true
        },
        "less": {
          "optional": true
        },
        "lightningcss": {
          "optional": true
        },
        "sass": {
          "optional": true
        },
        "sass-embedded": {
          "optional": true
        },
        "stylus": {
          "optional": true
        },
        "sugarss": {
          "optional": true
        },
        "terser": {
          "optional": true
        },
        "tsx": {
          "optional": true
        },
        "yaml": {
          "optional": true
        }
      }
    },
    "node_modules/vue": {
      "version": "3.5.17",
      "license": "MIT",
      "dependencies": {
        "@vue/compiler-dom": "3.5.17",
        "@vue/compiler-sfc": "3.5.17",
        "@vue/runtime-dom": "3.5.17",
        "@vue/server-renderer": "3.5.17",
        "@vue/shared": "3.5.17"
      },
      "peerDependencies": {
        "typescript": "*"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/vue-chartjs": {
      "version": "5.3.2",
      "license": "MIT",
      "peerDependencies": {
        "chart.js": "^4.1.1",
        "vue": "^3.0.0-0 || ^2.7.0"
      }
    },
    "node_modules/vue-demi": {
      "version": "0.14.10",
      "hasInstallScript": true,
      "license": "MIT",
      "bin": {
        "vue-demi-fix": "bin/vue-demi-fix.js",
        "vue-demi-switch": "bin/vue-demi-switch.js"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/antfu"
      },
      "peerDependencies": {
        "@vue/composition-api": "^1.0.0-rc.1",
        "vue": "^3.0.0-0 || ^2.6.0"
      },
      "peerDependenciesMeta": {
        "@vue/composition-api": {
          "optional": true
        }
      }
    },
    "node_modules/vue-router": {
      "version": "4.5.1",
      "license": "MIT",
      "dependencies": {
        "@vue/devtools-api": "^6.6.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/posva"
      },
      "peerDependencies": {
        "vue": "^3.2.0"
      }
    }
  }
}

--- 文件内容结束 (End of Content) ---

--- 文件路径 (File Path): ./web/package.json ---

{
  "name": "XTrafficDash",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.6.0",
    "chart.js": "^4.4.0",
    "pinia": "^2.1.0",
    "vue": "^3.4.0",
    "vue-chartjs": "^5.2.0",
    "vue-router": "^4.2.0"
  },
  "devDependencies": {
    "@vitejs/plugin-vue": "^5.0.0",
    "vite": "^6.0.0"
  },
  "overrides": {
    "rollup": "^4.9.0"
  }
}

--- 文件内容结束 (End of Content) ---

--- 文件路径 (File Path): ./web/src/stores/services.js ---

import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import { servicesAPI } from '@/utils/api'

export const useServicesStore = defineStore('services', () => {
  const services = ref([])
  const selectedService = ref(null)
  const loading = ref(false)
  const error = ref(null)
  const refreshInterval = ref(null)

  const loadServices = async () => {
    loading.value = true
    error.value = null
    
    try {
      const response = await servicesAPI.getServices()
      if (response.data.success) {
        services.value = response.data.data
      } else {
        error.value = response.data.message || '加载服务列表失败'
      }
    } catch (err) {
      console.error('加载服务列表失败:', err)
      if (err.response?.status === 401) {
        error.value = '认证失败，请重新登录'
      } else {
        error.value = '网络错误，请检查服务器连接'
      }
    } finally {
      loading.value = false
    }
  }

  const selectService = (service) => {
    selectedService.value = service
  }

  const loadServiceDetail = async (serviceId) => {
    try {
      const response = await servicesAPI.getServiceDetail(serviceId)
      if (response.data.success) {
        selectedService.value = {
          ...selectedService.value,
          ...response.data.data
        }
      }
    } catch (error) {
      console.error('加载服务详情失败:', error)
    }
  }

  const deleteService = async (serviceId) => {
    try {
      const response = await servicesAPI.deleteService(serviceId)
      if (response.data.success) {
        services.value = services.value.filter(s => s.id !== serviceId)
        return { success: true }
      } else {
        return { success: false, error: response.data.message }
      }
    } catch (error) {
      console.error('删除服务失败:', error)
      return { success: false, error: '删除失败，请重试' }
    }
  }

  // 开始自动刷新
  const startAutoRefresh = () => {
    if (refreshInterval.value) {
      clearInterval(refreshInterval.value)
    }
    // 每60秒刷新一次
    refreshInterval.value = setInterval(() => {
      loadServices()
    }, 60000)
  }

  // 停止自动刷新
  const stopAutoRefresh = () => {
    if (refreshInterval.value) {
      clearInterval(refreshInterval.value)
      refreshInterval.value = null
    }
  }

  // 强制刷新
  const forceRefresh = () => {
    loadServices()
    if (selectedService.value) {
      loadServiceDetail(selectedService.value.id)
    }
  }

  return {
    services: computed(() => services.value),
    selectedService: computed(() => selectedService.value),
    loading: computed(() => loading.value),
    error: computed(() => error.value),
    loadServices,
    selectService,
    loadServiceDetail,
    deleteService,
    startAutoRefresh,
    stopAutoRefresh,
    forceRefresh
  }
}) 
--- 文件内容结束 (End of Content) ---

--- 文件路径 (File Path): ./web/src/stores/auth.js ---

import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import { authAPI } from '@/utils/api'

export const useAuthStore = defineStore('auth', () => {
  const isAuthenticated = ref(false)
  const isLoading = ref(false)
  const error = ref(null)

  const login = async (password) => {
    isLoading.value = true
    error.value = null
    
    try {
      const response = await authAPI.login(password)
      if (response.data.success) {
        isAuthenticated.value = true
        localStorage.setItem('auth_token', response.data.token)
        return { success: true }
      } else {
        error.value = response.data.message || '登录失败'
        return { success: false, error: error.value }
      }
    } catch (err) {
      error.value = err.response?.data?.message || '网络错误'
      return { success: false, error: error.value }
    } finally {
      isLoading.value = false
    }
  }

  const logout = () => {
    isAuthenticated.value = false
    localStorage.removeItem('auth_token')
  }

  const checkAuth = () => {
    const token = localStorage.getItem('auth_token')
    if (token) {
      isAuthenticated.value = true
    }
  }

  return {
    isAuthenticated: computed(() => isAuthenticated.value),
    isLoading: computed(() => isLoading.value),
    error: computed(() => error.value),
    login,
    logout,
    checkAuth
  }
}) 
--- 文件内容结束 (End of Content) ---

--- 文件路径 (File Path): ./web/src/utils/formatters.js ---

export const formatBytes = (bytes) => {
  if (bytes === 0) return '0 B'
  const k = 1024
  const sizes = ['B', 'KB', 'MB', 'GB', 'TB']
  const i = Math.floor(Math.log(bytes) / Math.log(k))
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
}

export const formatDate = (dateString) => {
  const date = new Date(dateString)
  return date.toLocaleDateString('zh-CN')
}

// 智能时间格式化：根据时间差自动选择“刚刚”、“xx分钟前”、“xx小时前”、“xx天前”、“xx个月前”、“xx年前”或 yyyy-MM-dd HH:mm
export function formatSmartTime(dateStr) {
  if (!dateStr) return ''
  let date
  if (typeof dateStr === 'string') {
    if (dateStr.includes('T') || dateStr.includes('Z')) {
      date = new Date(dateStr)
    } else {
      date = new Date(dateStr.replace(' ', 'T'))
    }
  } else {
    date = new Date(dateStr)
  }
  const now = new Date()
  const diffMs = now - date
  const diffMin = Math.floor(diffMs / (1000 * 60))
  const diffHour = Math.floor(diffMs / (1000 * 60 * 60))
  const diffDay = Math.floor(diffMs / (1000 * 60 * 60 * 24))
  if (diffMin < 1) return '刚刚'
  if (diffMin < 60) return `${diffMin}分钟前`
  if (diffHour < 24) return `${diffHour}小时前`
  if (diffDay < 30) return `${diffDay}天前`
  if (diffDay < 365) return `${Math.floor(diffDay / 30)}个月前`
  if (diffDay >= 365) return `${Math.floor(diffDay / 365)}年前`
  // 超过24小时，显示 yyyy-MM-dd HH:mm
  const y = date.getFullYear()
  const m = (date.getMonth() + 1).toString().padStart(2, '0')
  const d = date.getDate().toString().padStart(2, '0')
  const hh = date.getHours().toString().padStart(2, '0')
  const mm = date.getMinutes().toString().padStart(2, '0')
  return `${y}-${m}-${d} ${hh}:${mm}`
} 
--- 文件内容结束 (End of Content) ---

--- 文件路径 (File Path): ./web/src/utils/api.js ---

import axios from 'axios'

// 创建axios实例
const api = axios.create({
  baseURL: '/api',
  timeout: 15000
})

// 请求拦截器 - 添加认证token
api.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('auth_token')
    if (token) {
      config.headers.Authorization = `Bearer ${token}`
    }
    return config
  },
  (error) => {
    console.error('请求拦截器错误:', error)
    return Promise.reject(error)
  }
)

// 响应拦截器 - 处理认证错误
api.interceptors.response.use(
  (response) => {
    return response
  },
  (error) => {
    // 处理401认证错误
    if (error.response?.status === 401) {
      localStorage.removeItem('auth_token')
      window.location.href = '/login'
      return Promise.reject(error)
    }
    
    console.error('API请求失败:', error)
    return Promise.reject(error)
  }
)

export const servicesAPI = {
  // 获取服务列表
  getServices: () => api.get('/db/services'),
  
  // 获取服务详情
  getServiceDetail: (serviceId) => api.get(`/db/services/${serviceId}/traffic`),
  
  // 删除服务
  deleteService: (serviceId) => api.delete(`/db/services/${serviceId}`),
  
  // 获取7天流量数据
  getWeeklyTraffic: (serviceId) => api.get(`/db/traffic/weekly/${serviceId}`),
  
  // 获取30天流量数据
  getMonthlyTraffic: (serviceId) => api.get(`/db/traffic/monthly/${serviceId}`),
  
  // 获取端口详情
  getPortDetail: (serviceId, tag, days = 7) => api.get(`/db/port-detail/${serviceId}/${tag}?days=${days}`),
  
  // 获取用户详情
  getUserDetail: (serviceId, email, days = 7) => api.get(`/db/user-detail/${serviceId}/${email}?days=${days}`),
  
  // 更新服务自定义名称
  updateServiceCustomName: (serviceId, customName) => api.put(`/db/services/${serviceId}/custom-name`, { custom_name: customName }),
  
  // 更新入站端口自定义名称
  updateInboundCustomName: (serviceId, tag, customName) => api.put(`/db/inbound/${serviceId}/${tag}/custom-name`, { custom_name: customName }),
  
  // 更新客户端自定义名称
  updateClientCustomName: (serviceId, email, customName) => api.put(`/db/client/${serviceId}/${email}/custom-name`, { custom_name: customName }),
  
  // 下载端口历史数据
  downloadPortHistory: (serviceId, tag) => api.get(`/db/download/port-history/${serviceId}/${tag}`, { responseType: 'blob' }),
  
  // 下载用户历史数据
  downloadUserHistory: (serviceId, email) => api.get(`/db/download/user-history/${serviceId}/${email}`, { responseType: 'blob' })
}

export const authAPI = {
  // 登录
  login: (password) => api.post('/auth/login', { password }),
  
  // 验证token
  verifyToken: () => api.get('/auth/verify')
}

export default api 
--- 文件内容结束 (End of Content) ---

--- 文件路径 (File Path): ./web/src/main.js ---

import { createApp } from 'vue'
import { createPinia } from 'pinia'
import router from './router'
import App from './App.vue'
import './assets/main.css'

const app = createApp(App)
const pinia = createPinia()

app.use(pinia)
app.use(router)

app.mount('#app') 
--- 文件内容结束 (End of Content) ---

--- 文件路径 (File Path): ./web/src/assets/main.css ---

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  min-height: 100vh;
  color: #333;
}

.container {
  max-width: 1400px;
  margin: 0 auto;
  padding: 20px;
}

.header {
  text-align: center;
  margin-bottom: 40px;
  color: white;
}

.header h1 {
  font-size: 2.5rem;
  margin-bottom: 10px;
  text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
}

.header p {
  font-size: 1.1rem;
  opacity: 0.9;
}

.cards-grid {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 18px;
  margin-bottom: 25px;
}

.service-card {
  background: white;
  border-radius: 12px;
  padding: 18px;
  box-shadow: 0 8px 25px rgba(0,0,0,0.15);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  cursor: pointer;
  position: relative;
  min-width: 0;
}

.service-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 15px 40px rgba(0,0,0,0.3);
}

.card-header {
  margin-bottom: 12px;
}

.ip-address {
  font-size: 1rem;
  font-weight: bold;
  color: #2c3e50;
  display: flex;
  align-items: center;
  gap: 8px;
}

.status-badge {
  padding: 2px 8px;
  border-radius: 12px;
  font-size: 0.7rem;
  font-weight: bold;
  white-space: nowrap;
}

.status-active {
  background: #e8f5e8;
  color: #27ae60;
}

.status-inactive {
  background: #ffeaea;
  color: #e74c3c;
}

.stats-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 12px;
  margin-bottom: 15px;
}

.stat-item {
  text-align: center;
  padding: 8px;
  background: #f8f9fa;
  border-radius: 6px;
}

.stat-value {
  font-size: 1.1rem;
  font-weight: bold;
  color: #2c3e50;
}

.stat-label {
  font-size: 0.85rem;
  color: #7f8c8d;
  margin-top: 4px;
}

.chart-container {
  height: 150px;
  position: relative;
  margin-top: 12px;
  margin-bottom: 8px;
}

.loading {
  text-align: center;
  padding: 40px;
  color: white;
  font-size: 1.1rem;
}

.error {
  text-align: center;
  padding: 40px;
  color: #e74c3c;
  background: white;
  border-radius: 10px;
  margin: 20px 0;
}

.back-button {
  position: fixed;
  top: 20px;
  left: 20px;
  background: rgba(255,255,255,0.9);
  border: none;
  padding: 10px 20px;
  border-radius: 25px;
  cursor: pointer;
  font-size: 1rem;
  box-shadow: 0 4px 15px rgba(0,0,0,0.2);
  transition: all 0.3s ease;
  z-index: 1000;
}

.back-button:hover {
  background: white;
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(0,0,0,0.3);
}

.delete-button {
  position: absolute;
  top: 15px;
  right: 15px;
  background: #e74c3c;
  color: white;
  border: none;
  width: 28px;
  height: 28px;
  border-radius: 50%;
  cursor: pointer;
  font-size: 14px;
  font-weight: bold;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.3s ease;
  z-index: 10;
}

.delete-button:hover {
  background: #c0392b;
  transform: scale(1.1);
}

.traffic-tables {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 25px;
}

.traffic-table {
  background: white;
  border-radius: 12px;
  padding: 20px;
  box-shadow: 0 4px 15px rgba(0,0,0,0.1);
}

.table-title {
  font-size: 1.2rem;
  font-weight: bold;
  margin-bottom: 12px;
  color: #2c3e50;
}

.table-row {
  display: flex;
  justify-content: flex-end;
  align-items: center;
  padding: 12px 16px;
  margin-bottom: 8px;
  background: #f8f9fa;
  border-radius: 8px;
  border-left: 4px solid #74b9ff;
  transition: all 0.3s ease;
  cursor: pointer;
  gap: 20px;
}

.table-row:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(116, 185, 255, 0.2);
  border-left-color: #0984e3;
}

.table-row:last-child {
  margin-bottom: 0;
}

.table-row .table-label {
  flex-shrink: 0;
}

.table-row .table-value {
  flex: 1;
  display: flex;
  justify-content: flex-end;
  gap: 20px;
  align-items: center;
}

.table-label {
  font-weight: 600;
  color: #2d3436;
  font-size: 1rem;
}

.table-value {
  display: flex;
  gap: 20px;
  align-items: center;
  justify-content: flex-end;
  font-size: 0.95rem;
  font-weight: 500;
  text-align: right;
}

.upload-traffic {
  color: #74b9ff;
  display: flex;
  align-items: center;
  gap: 4px;
}

.download-traffic {
  color: #00b894;
  display: flex;
  align-items: center;
  gap: 4px;
}

.traffic-icon {
  font-size: 1.1rem;
  font-weight: bold;
}

.clickable {
  cursor: pointer;
  color: #007bff;
  text-decoration: underline;
  transition: color 0.2s;
}

.clickable:hover {
  color: #0056b3;
}

@media (max-width: 1200px) {
  .cards-grid {
    grid-template-columns: repeat(3, 1fr);
  }
}

@media (max-width: 900px) {
  .cards-grid {
    grid-template-columns: repeat(2, 1fr);
  }
}

@media (max-width: 768px) {
  .cards-grid {
    grid-template-columns: repeat(2, 1fr);
    gap: 12px;
  }
  
  .service-card {
    padding: 15px;
  }
  
  .chart-container {
    height: 120px;
  }
  
  .stat-value {
    font-size: 1rem;
  }
  
  .ip-address {
    font-size: 0.9rem;
  }
  
  .traffic-tables {
    grid-template-columns: 1fr;
  }
  
  .header h1 {
    font-size: 2rem;
  }
}

@media (max-width: 480px) {
  .cards-grid {
    grid-template-columns: 1fr;
    gap: 10px;
  }
  
  .service-card {
    padding: 12px;
  }
  
  .chart-container {
    height: 100px;
  }
}

/* 刷新按钮样式 */
.refresh-button {
  background: linear-gradient(135deg, #74b9ff 0%, #0984e3 100%);
  color: white;
  border: none;
  padding: 10px 20px;
  border-radius: 25px;
  cursor: pointer;
  font-size: 0.9rem;
  font-weight: 600;
  display: flex;
  align-items: center;
  gap: 8px;
  box-shadow: 0 4px 15px rgba(116, 185, 255, 0.3);
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
}

.refresh-button::before {
  content: "🔄";
  font-size: 1rem;
  transition: transform 0.3s ease;
}

.refresh-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(116, 185, 255, 0.4);
  background: linear-gradient(135deg, #0984e3 0%, #74b9ff 100%);
}

.refresh-button:hover::before {
  transform: rotate(180deg);
}

.refresh-button:active {
  transform: translateY(0);
  box-shadow: 0 2px 10px rgba(116, 185, 255, 0.3);
}

.refresh-button:disabled {
  background: #bdc3c7;
  cursor: not-allowed;
  transform: none;
  box-shadow: none;
}

.refresh-button:disabled::before {
  transform: none;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

/* 详情页头部样式 */
.detail-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 20px;
  background: white;
  padding: 20px;
  border-radius: 12px;
  box-shadow: 0 4px 15px rgba(0,0,0,0.1);
}

.detail-title {
  font-size: 1.3rem;
  font-weight: bold;
  color: #2c3e50;
} 
--- 文件内容结束 (End of Content) ---

--- 文件路径 (File Path): ./web/src/router/index.js ---

import { createRouter, createWebHistory } from 'vue-router'
import { useAuthStore } from '../stores/auth'
import Login from '../views/Login.vue'
import Home from '../views/Home.vue'
import Detail from '../views/Detail.vue'
import PortDetail from '../views/PortDetail.vue'
import UserDetail from '../views/UserDetail.vue'
import Hy2Setting from '../views/Hy2Setting.vue'

const routes = [
  {
    path: '/',
    redirect: '/home'
  },
  {
    path: '/login',
    name: 'Login',
    component: Login,
    meta: { requiresAuth: false }
  },
  {
    path: '/home',
    name: 'Home',
    component: Home,
    meta: { requiresAuth: true }
  },
  {
    path: '/detail/:serviceId',
    name: 'Detail',
    component: Detail,
    meta: { requiresAuth: true }
  },
  {
    path: '/port/:serviceId/:tag',
    name: 'PortDetail',
    component: PortDetail,
    meta: { requiresAuth: true }
  },
  {
    path: '/user/:serviceId/:email',
    name: 'UserDetail',
    component: UserDetail,
    meta: { requiresAuth: true }
  },
  {
    path: '/hy2-setting',
    name: 'Hy2Setting',
    component: Hy2Setting,
    meta: { requiresAuth: true }
  }
]

const router = createRouter({
  history: createWebHistory(),
  routes
})

// 路由守卫
router.beforeEach((to, from, next) => {
  const authStore = useAuthStore()
  
  if (to.meta.requiresAuth && !authStore.isAuthenticated) {
    next('/login')
  } else if (to.path === '/login' && authStore.isAuthenticated) {
    next('/home')
  } else {
    next()
  }
})

export default router 
--- 文件内容结束 (End of Content) ---

--- 文件路径 (File Path): ./backend/database/auth.go ---

package database

import (
	"crypto/md5"
	"encoding/hex"
	"net/http"
	"os"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/golang-jwt/jwt/v5"
)

type LoginRequest struct {
	Password string `json:"password"`
}

type LoginResponse struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
	Token   string `json:"token,omitempty"`
}

type Claims struct {
	UserID string `json:"user_id"`
	jwt.RegisteredClaims
}

var jwtSecret []byte

// 生成带16位固定后缀的JWT密钥
func getPasswordWithSuffix() string {
	password := os.Getenv("PASSWORD")
	if password == "" {
		return ""
	}
	h := md5.New()
	h.Write([]byte(password))
	hash := hex.EncodeToString(h.Sum(nil))
	return password + hash[:16]
}

// 初始化JWT密钥
func InitJWT() {
	// 从环境变量读取密钥并加上16位固定后缀
	secret := getPasswordWithSuffix()
	if secret == "" {
		panic("必须设置环境变量 PASSWORD 作为 JWT 密钥和登录密码")
	}
	jwtSecret = []byte(secret)
}

// 验证密码
func validatePassword(password string) bool {
	// 从环境变量读取密码
	envPassword := os.Getenv("PASSWORD")
	if envPassword == "" {
		// 未设置密码，直接返回 false
		return false
	}
	return password == envPassword
}

// 生成JWT token
func generateToken() (string, error) {
	claims := Claims{
		UserID: "admin",
		RegisteredClaims: jwt.RegisteredClaims{
			ExpiresAt: jwt.NewNumericDate(time.Now().Add(24 * time.Hour)),
			IssuedAt:  jwt.NewNumericDate(time.Now()),
		},
	}

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	return token.SignedString(jwtSecret)
}

// 验证JWT token
func validateToken(tokenString string) (*Claims, error) {
	token, err := jwt.ParseWithClaims(tokenString, &Claims{}, func(token *jwt.Token) (interface{}, error) {
		return jwtSecret, nil
	})

	if err != nil {
		return nil, err
	}

	if claims, ok := token.Claims.(*Claims); ok && token.Valid {
		return claims, nil
	}

	return nil, jwt.ErrSignatureInvalid
}

// 登录处理
func HandleLogin(c *gin.Context) {
	var req LoginRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, LoginResponse{
			Success: false,
			Message: "请求参数错误",
		})
		return
	}

	if !validatePassword(req.Password) {
		c.JSON(http.StatusUnauthorized, LoginResponse{
			Success: false,
			Message: "密码错误",
		})
		return
	}

	token, err := generateToken()
	if err != nil {
		c.JSON(http.StatusInternalServerError, LoginResponse{
			Success: false,
			Message: "生成token失败",
		})
		return
	}

	c.JSON(http.StatusOK, LoginResponse{
		Success: true,
		Message: "登录成功",
		Token:   token,
	})
}

// 验证token中间件
func AuthMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		authHeader := c.GetHeader("Authorization")
		if authHeader == "" {
			c.JSON(http.StatusUnauthorized, gin.H{"success": false, "message": "未提供认证token"})
			c.Abort()
			return
		}

		// 提取Bearer token
		if len(authHeader) < 7 || authHeader[:7] != "Bearer " {
			c.JSON(http.StatusUnauthorized, gin.H{"success": false, "message": "token格式错误"})
			c.Abort()
			return
		}

		tokenString := authHeader[7:]
		claims, err := validateToken(tokenString)
		if err != nil {
			c.JSON(http.StatusUnauthorized, gin.H{"success": false, "message": "token无效"})
			c.Abort()
			return
		}

		// 将用户信息存储到上下文中
		c.Set("user_id", claims.UserID)
		c.Next()
	}
}

// 验证token接口
func HandleVerifyToken(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"message": "token有效",
	})
}

--- 文件内容结束 (End of Content) ---

--- 文件路径 (File Path): ./backend/database/database.go ---

package database

import (
	"database/sql"
	"fmt"
	"log"
	"regexp"
	"strconv"
	"strings"
	"time"

	_ "github.com/mattn/go-sqlite3"
)

// 数据库结构体
type Database struct {
	db *sql.DB
}

// 流量数据结构体
type TrafficData struct {
	ClientTraffics  []ClientTraffic  `json:"clientTraffics"`
	InboundTraffics []InboundTraffic `json:"inboundTraffics"`
}

// 客户端流量结构体
type ClientTraffic struct {
	ID         int    `json:"id"`
	InboundID  int    `json:"inboundId"`
	Enable     bool   `json:"enable"`
	Email      string `json:"email"`
	Up         int64  `json:"up"`
	Down       int64  `json:"down"`
	ExpiryTime int64  `json:"expiryTime"`
	Total      int64  `json:"total"`
	Reset      int64  `json:"reset"`
}

// 入站流量结构体
type InboundTraffic struct {
	IsInbound  bool   `json:"IsInbound"`
	IsOutbound bool   `json:"IsOutbound"`
	Tag        string `json:"Tag"`
	Up         int64  `json:"Up"`
	Down       int64  `json:"Down"`
}

// 服务信息结构体
type Service struct {
	ID        int       `json:"id"`
	IPAddress string    `json:"ip_address"`
	FirstSeen time.Time `json:"first_seen"`
	LastSeen  time.Time `json:"last_seen"`
	Status    string    `json:"status"`
}

// 入站流量记录结构体
type InboundTrafficRecord struct {
	ID          int       `json:"id"`
	ServiceID   int       `json:"service_id"`
	Tag         string    `json:"tag"`
	Port        int       `json:"port"`
	CustomName  string    `json:"custom_name"`
	Up          int64     `json:"up"`
	Down        int64     `json:"down"`
	LastUpdated time.Time `json:"last_updated"`
	Status      string    `json:"status"`
}

// 客户端流量记录结构体
type ClientTrafficRecord struct {
	ID          int       `json:"id"`
	ServiceID   int       `json:"service_id"`
	Email       string    `json:"email"`
	CustomName  string    `json:"custom_name"`
	Up          int64     `json:"up"`
	Down        int64     `json:"down"`
	LastUpdated time.Time `json:"last_updated"`
	Status      string    `json:"status"`
}

// HY2配置结构体
// 用于存储hy2主动流量同步的参数

type Hy2Config struct {
	ID                int    `json:"id"`
	SourceAPIPassword string `json:"source_api_password"`
	SourceAPIHost     string `json:"source_api_host"`
	SourceAPIPort     string `json:"source_api_port"`
	TargetAPIURL      string `json:"target_api_url"`
}

// 打开数据库连接
func OpenDatabase(dbPath string) (*Database, error) {
	db, err := sql.Open("sqlite3", dbPath)
	if err != nil {
		return nil, fmt.Errorf("打开数据库失败: %v", err)
	}

	// 配置数据库连接池
	db.SetMaxOpenConns(25)                 // 最大连接数
	db.SetMaxIdleConns(10)                 // 最大空闲连接数
	db.SetConnMaxLifetime(5 * time.Minute) // 连接最大生命周期
	db.SetConnMaxIdleTime(3 * time.Minute) // 空闲连接最大生命周期

	// 测试连接
	if err := db.Ping(); err != nil {
		return nil, fmt.Errorf("数据库连接测试失败: %v", err)
	}

	// 设置时区为本地时间
	if _, err := db.Exec("PRAGMA timezone = 'local'"); err != nil {
		return nil, fmt.Errorf("设置时区失败: %v", err)
	}

	// 优化SQLite性能
	if _, err := db.Exec("PRAGMA journal_mode = WAL"); err != nil {
		return nil, fmt.Errorf("设置WAL模式失败: %v", err)
	}
	if _, err := db.Exec("PRAGMA synchronous = NORMAL"); err != nil {
		return nil, fmt.Errorf("设置同步模式失败: %v", err)
	}
	if _, err := db.Exec("PRAGMA cache_size = 10000"); err != nil {
		return nil, fmt.Errorf("设置缓存大小失败: %v", err)
	}
	if _, err := db.Exec("PRAGMA temp_store = MEMORY"); err != nil {
		return nil, fmt.Errorf("设置临时存储失败: %v", err)
	}

	// 初始化数据库表
	if err := initDatabase(db); err != nil {
		return nil, fmt.Errorf("初始化数据库失败: %v", err)
	}

	return &Database{db: db}, nil
}

// 关闭数据库连接
func (d *Database) Close() error {
	return d.db.Close()
}

// 初始化数据库表
func initDatabase(db *sql.DB) error {
	// 读取SQL文件内容
	schemaSQL := `
	-- XTrafficDash 流量数据数据库表结构
	-- 创建时间: 2024-01-01
	-- 描述: 存储X-UI服务的流量数据，包括入站流量和客户端流量

	-- 1. 服务表 - 记录每个IP对应的X-UI服务
	CREATE TABLE IF NOT EXISTS services (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		ip_address TEXT NOT NULL UNIQUE,
		custom_name TEXT,
		first_seen TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		last_seen TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		status TEXT DEFAULT 'active'
	);

	-- 2. 入站流量表 - 记录每个入站端口的流量数据
	CREATE TABLE IF NOT EXISTS inbound_traffics (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		service_id INTEGER NOT NULL,
		tag TEXT NOT NULL,
		port INTEGER,
		custom_name TEXT,
		last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		status TEXT DEFAULT 'active'
	);

	-- 3. 客户端流量表 - 记录每个用户的流量数据
	CREATE TABLE IF NOT EXISTS client_traffics (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		service_id INTEGER NOT NULL,
		email TEXT NOT NULL,
		custom_name TEXT,
		last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		status TEXT DEFAULT 'active'
	);

	-- 4. 入站流量历史记录表 - 每日流量统计
	CREATE TABLE IF NOT EXISTS inbound_traffic_history (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		inbound_traffic_id INTEGER NOT NULL,
		service_id INTEGER NOT NULL,
		tag TEXT NOT NULL,
		date DATE NOT NULL,
		daily_up BIGINT DEFAULT 0,
		daily_down BIGINT DEFAULT 0,
		created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		FOREIGN KEY (inbound_traffic_id) REFERENCES inbound_traffics(id) ON DELETE CASCADE,
		FOREIGN KEY (service_id) REFERENCES services(id) ON DELETE CASCADE,
		UNIQUE(inbound_traffic_id, date)
	);

	-- 5. 客户端流量历史记录表 - 每日流量统计
	CREATE TABLE IF NOT EXISTS client_traffic_history (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		client_traffic_id INTEGER NOT NULL,
		service_id INTEGER NOT NULL,
		email TEXT NOT NULL,
		date DATE NOT NULL,
		daily_up BIGINT DEFAULT 0,
		daily_down BIGINT DEFAULT 0,
		created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		FOREIGN KEY (client_traffic_id) REFERENCES client_traffics(id) ON DELETE CASCADE,
		FOREIGN KEY (service_id) REFERENCES services(id) ON DELETE CASCADE,
		UNIQUE(client_traffic_id, date)
	);

	-- 6. HY2配置表
	CREATE TABLE IF NOT EXISTS hy2_config (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		source_api_password TEXT NOT NULL DEFAULT '',
		source_api_host TEXT NOT NULL DEFAULT '',
		source_api_port TEXT NOT NULL DEFAULT '',
		target_api_url TEXT NOT NULL DEFAULT ''
	);


	-- 创建索引
	CREATE INDEX IF NOT EXISTS idx_services_ip ON services(ip_address);
	CREATE INDEX IF NOT EXISTS idx_inbound_traffics_service_tag ON inbound_traffics(service_id, tag);
	CREATE INDEX IF NOT EXISTS idx_client_traffics_service_email ON client_traffics(service_id, email);
	CREATE INDEX IF NOT EXISTS idx_inbound_history_date ON inbound_traffic_history(date);
	CREATE INDEX IF NOT EXISTS idx_client_history_date ON client_traffic_history(date);
	`

	// 执行SQL语句
	_, err := db.Exec(schemaSQL)
	return err
}

// 处理流量数据
func (d *Database) ProcessTrafficData(clientIP string, userAgent string, requestBody string, trafficData *TrafficData) error {
	// 开始事务
	tx, err := d.db.Begin()
	if err != nil {
		return fmt.Errorf("开始事务失败: %v", err)
	}
	defer tx.Rollback()

	// 1. 获取或创建服务记录
	serviceID, err := d.getOrCreateService(tx, clientIP)
	if err != nil {
		return fmt.Errorf("获取或创建服务失败: %v", err)
	}

	// 2. 处理入站流量数据并记录有流量的端口
	err = d.processInboundTraffics(tx, serviceID, trafficData.InboundTraffics)
	if err != nil {
		return fmt.Errorf("处理入站流量失败: %v", err)
	}

	// 3. 处理客户端流量数据
	err = d.processClientTraffics(tx, serviceID, trafficData.ClientTraffics)
	if err != nil {
		return fmt.Errorf("处理客户端流量失败: %v", err)
	}

	// 4. 只要有数据包发来就更新节点最后活跃时间（包括心跳数据）
	err = d.updateServiceLastSeen(tx, serviceID)
	if err != nil {
		return fmt.Errorf("更新服务最后活跃时间失败: %v", err)
	}

	// 提交事务
	return tx.Commit()
}

// 获取或创建服务记录
func (d *Database) getOrCreateService(tx *sql.Tx, ipAddress string) (int, error) {
	var serviceID int

	// 先尝试查找现有服务
	err := tx.QueryRow("SELECT id FROM services WHERE ip_address = ?", ipAddress).Scan(&serviceID)
	if err == sql.ErrNoRows {
		now := time.Now()
		result, err := tx.Exec(`
			INSERT INTO services (ip_address, custom_name, first_seen, last_seen, status)
			VALUES (?, ?, ?, ?, 'active')
		`, ipAddress, "", now, now)
		if err != nil {
			return 0, err
		}
		serviceID64, err := result.LastInsertId()
		if err != nil {
			return 0, err
		}
		serviceID = int(serviceID64)
	} else if err != nil {
		return 0, err
	}

	return serviceID, nil
}

// 处理入站流量数据
func (d *Database) processInboundTraffics(tx *sql.Tx, serviceID int, inboundTraffics []InboundTraffic) error {
	var activePorts []string
	for _, traffic := range inboundTraffics {
		if !traffic.IsInbound {
			continue
		}
		port := d.extractPortFromTag(traffic.Tag)
		if traffic.Up > 0 || traffic.Down > 0 {
			activePorts = append(activePorts, fmt.Sprintf("端口%d(上传:%s,下载:%s)", port, d.formatBytes(traffic.Up), d.formatBytes(traffic.Down)))
		}
		// 获取或创建入站流量记录
		var recordID int
		err := tx.QueryRow(`SELECT id FROM inbound_traffics WHERE service_id = ? AND tag = ?`, serviceID, traffic.Tag).Scan(&recordID)
		if err == sql.ErrNoRows {
			now := time.Now()
			result, err := tx.Exec(`INSERT INTO inbound_traffics (service_id, tag, port, last_updated, status) VALUES (?, ?, ?, ?, 'active')`, serviceID, traffic.Tag, port, now)
			if err != nil {
				return err
			}
			recordID64, _ := result.LastInsertId()
			recordID = int(recordID64)
		} else if err != nil {
			return err
		}
		// upsert 到历史表，写入 date 用 localtime
		if traffic.Up > 0 || traffic.Down > 0 {
			_, err := tx.Exec(`
				INSERT INTO inbound_traffic_history (inbound_traffic_id, service_id, tag, date, daily_up, daily_down, created_at)
				VALUES (?, ?, ?, DATE('now', 'localtime'), ?, ?, ?)
				ON CONFLICT(inbound_traffic_id, date) DO UPDATE SET
					daily_up = daily_up + excluded.daily_up,
					daily_down = daily_down + excluded.daily_down
			`, recordID, serviceID, traffic.Tag, traffic.Up, traffic.Down, time.Now())
			if err != nil {
				return err
			}
			// 新增：有流量时更新 last_updated
			_, err = tx.Exec(`UPDATE inbound_traffics SET last_updated = ? WHERE id = ?`, time.Now(), recordID)
			if err != nil {
				return err
			}
		}
	}
	if len(activePorts) > 0 {
		fmt.Printf("活跃端口: %s\n", strings.Join(activePorts, ", "))
	}
	return nil
}

// 处理客户端流量数据
func (d *Database) processClientTraffics(tx *sql.Tx, serviceID int, clientTraffics []ClientTraffic) error {
	for _, traffic := range clientTraffics {
		var recordID int
		err := tx.QueryRow(`SELECT id FROM client_traffics WHERE service_id = ? AND email = ?`, serviceID, traffic.Email).Scan(&recordID)
		if err == sql.ErrNoRows {
			now := time.Now()
			result, err := tx.Exec(`INSERT INTO client_traffics (service_id, email, last_updated, status) VALUES (?, ?, ?, 'active')`, serviceID, traffic.Email, now)
			if err != nil {
				return err
			}
			recordID64, _ := result.LastInsertId()
			recordID = int(recordID64)
		} else if err != nil {
			return err
		}
		// upsert 到历史表，写入 date 用 localtime
		if traffic.Up > 0 || traffic.Down > 0 {
			_, err := tx.Exec(`
				INSERT INTO client_traffic_history (client_traffic_id, service_id, email, date, daily_up, daily_down, created_at)
				VALUES (?, ?, ?, DATE('now', 'localtime'), ?, ?, ?)
				ON CONFLICT(client_traffic_id, date) DO UPDATE SET
					daily_up = daily_up + excluded.daily_up,
					daily_down = daily_down + excluded.daily_down
			`, recordID, serviceID, traffic.Email, traffic.Up, traffic.Down, time.Now())
			if err != nil {
				return err
			}
			// 新增：有流量时更新 last_updated
			_, err = tx.Exec(`UPDATE client_traffics SET last_updated = ? WHERE id = ?`, time.Now(), recordID)
			if err != nil {
				return err
			}
		}
	}
	return nil
}

// 更新服务最后活跃时间
func (d *Database) updateServiceLastSeen(tx *sql.Tx, serviceID int) error {
	now := time.Now()
	_, err := tx.Exec(`
		UPDATE services 
		SET last_seen = ? 
		WHERE id = ?
	`, now, serviceID)
	return err
}

// 从tag中提取端口号
func (d *Database) extractPortFromTag(tag string) int {
	re := regexp.MustCompile(`inbound-(\d+)`)
	matches := re.FindStringSubmatch(tag)
	if len(matches) > 1 {
		if port, err := strconv.Atoi(matches[1]); err == nil {
			return port
		}
	}
	return 0
}

// 格式化字节数
func (d *Database) formatBytes(bytes int64) string {
	const unit = 1024
	if bytes < unit {
		return fmt.Sprintf("%d B", bytes)
	}
	div, exp := int64(unit), 0
	for n := bytes / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.1f %cB", float64(bytes)/float64(div), "KMGTPE"[exp])
}

// 获取服务汇总信息
func (d *Database) GetServiceSummary() ([]map[string]interface{}, error) {
	// 一次性查询所有统计信息，避免N+1问题
	rows, err := d.db.Query(`
		SELECT
			s.id,
			s.ip_address,
			s.custom_name,
			s.last_seen,
			CASE 
				WHEN (strftime('%s', 'now') - strftime('%s', s.last_seen)) <= 30 THEN 'active'
				ELSE 'inactive'
			END as status,
			COALESCE(it_counts.inbound_count, 0) as inbound_count,
			COALESCE(ct_counts.client_count, 0) as client_count,
			COALESCE(today_traffic.today_up, 0) as today_inbound_up,
			COALESCE(today_traffic.today_down, 0) as today_inbound_down
		FROM
			services s
		LEFT JOIN (
			SELECT service_id, COUNT(id) as inbound_count FROM inbound_traffics WHERE status = 'active' GROUP BY service_id
		) it_counts ON s.id = it_counts.service_id
		LEFT JOIN (
			SELECT service_id, COUNT(id) as client_count FROM client_traffics WHERE status = 'active' GROUP BY service_id
		) ct_counts ON s.id = ct_counts.service_id
		LEFT JOIN (
			SELECT service_id, SUM(daily_up) as today_up, SUM(daily_down) as today_down FROM inbound_traffic_history WHERE date = DATE('now', 'localtime') GROUP BY service_id
		) today_traffic ON s.id = today_traffic.service_id
		ORDER BY
			s.last_seen DESC;
	`)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	var results []map[string]interface{}
	for rows.Next() {
		var id int
		var ipAddress, lastSeen, status string
		var customName sql.NullString
		var inboundCount, clientCount int
		var todayInboundUp, todayInboundDown int64

		err := rows.Scan(&id, &ipAddress, &customName, &lastSeen, &status, &inboundCount, &clientCount, &todayInboundUp, &todayInboundDown)
		if err != nil {
			return nil, err
		}
		result := map[string]interface{}{
			"id":                 id,
			"ip":                 ipAddress,
			"custom_name":        customName.String,
			"last_seen":          lastSeen,
			"status":             status,
			"inbound_count":      inboundCount,
			"client_count":       clientCount,
			"today_inbound_up":   todayInboundUp,
			"today_inbound_down": todayInboundDown,
		}
		results = append(results, result)
	}
	return results, nil
}

// 获取指定服务的详细流量信息
func (d *Database) GetServiceTraffic(serviceID int) (map[string]interface{}, error) {
	// 获取服务基本信息
	var service Service
	var rawIPAddress string
	var customName sql.NullString
	err := d.db.QueryRow(`
		SELECT id, ip_address, custom_name, first_seen, last_seen, status
		FROM services WHERE id = ?
	`, serviceID).Scan(&service.ID, &rawIPAddress, &customName,
		&service.FirstSeen, &service.LastSeen, &service.Status)
	if err != nil {
		return nil, err
	}
	service.IPAddress = rawIPAddress

	// 批量查询所有入站端口的今日流量
	inboundTrafficMap := make(map[int]struct{ Up, Down int64 })
	inboundTrafficRows, err := d.db.Query(`
		SELECT inbound_traffic_id, COALESCE(daily_up,0), COALESCE(daily_down,0)
		FROM inbound_traffic_history
		WHERE service_id = ? AND date = DATE('now', 'localtime')
	`, serviceID)
	if err == nil {
		defer inboundTrafficRows.Close()
		for inboundTrafficRows.Next() {
			var inboundID int
			var up, down int64
			if err := inboundTrafficRows.Scan(&inboundID, &up, &down); err == nil {
				inboundTrafficMap[inboundID] = struct{ Up, Down int64 }{up, down}
			}
		}
	}

	// 获取入站流量（基础信息）
	inboundRows, err := d.db.Query(`
		SELECT id, service_id, tag, port, custom_name, last_updated, status
		FROM inbound_traffics WHERE service_id = ? AND status = 'active'
		ORDER BY tag
	`, serviceID)
	if err != nil {
		return nil, err
	}
	defer inboundRows.Close()

	var inboundTraffics []InboundTrafficRecord
	for inboundRows.Next() {
		var record InboundTrafficRecord
		var customName sql.NullString
		err := inboundRows.Scan(&record.ID, &record.ServiceID, &record.Tag, &record.Port, &customName,
			&record.LastUpdated, &record.Status)
		if err != nil {
			return nil, err
		}
		record.CustomName = customName.String
		// 从 map 获取今日流量
		if v, ok := inboundTrafficMap[record.ID]; ok {
			record.Up = v.Up
			record.Down = v.Down
		} else {
			record.Up = 0
			record.Down = 0
		}
		inboundTraffics = append(inboundTraffics, record)
	}

	// 批量查询所有客户端的今日流量
	clientTrafficMap := make(map[int]struct{ Up, Down int64 })
	clientTrafficRows, err := d.db.Query(`
		SELECT client_traffic_id, COALESCE(daily_up,0), COALESCE(daily_down,0)
		FROM client_traffic_history
		WHERE service_id = ? AND date = DATE('now', 'localtime')
	`, serviceID)
	if err == nil {
		defer clientTrafficRows.Close()
		for clientTrafficRows.Next() {
			var clientID int
			var up, down int64
			if err := clientTrafficRows.Scan(&clientID, &up, &down); err == nil {
				clientTrafficMap[clientID] = struct{ Up, Down int64 }{up, down}
			}
		}
	}

	// 获取客户端流量（基础信息）
	clientRows, err := d.db.Query(`
		SELECT id, service_id, email, custom_name, last_updated, status
		FROM client_traffics WHERE service_id = ? AND status = 'active'
		ORDER BY email
	`, serviceID)
	if err != nil {
		return nil, err
	}
	defer clientRows.Close()

	var clientTraffics []ClientTrafficRecord
	for clientRows.Next() {
		var record ClientTrafficRecord
		var customName sql.NullString
		err := clientRows.Scan(&record.ID, &record.ServiceID, &record.Email, &customName, &record.LastUpdated, &record.Status)
		if err != nil {
			return nil, err
		}
		record.CustomName = customName.String
		// 从 map 获取今日流量
		if v, ok := clientTrafficMap[record.ID]; ok {
			record.Up = v.Up
			record.Down = v.Down
		} else {
			record.Up = 0
			record.Down = 0
		}
		clientTraffics = append(clientTraffics, record)
	}

	result := map[string]interface{}{
		"service":          service,
		"inbound_traffics": inboundTraffics,
		"client_traffics":  clientTraffics,
	}
	return result, nil
}

// 删除服务及其所有相关数据
func (d *Database) DeleteService(serviceID int) error {
	log.Printf("开始删除服务ID: %d", serviceID)

	tx, err := d.db.Begin()
	if err != nil {
		return err
	}
	defer tx.Rollback()

	// 删除历史记录
	_, err = tx.Exec("DELETE FROM inbound_traffic_history WHERE service_id = ?", serviceID)
	if err != nil {
		return fmt.Errorf("删除历史记录失败: %v", err)
	}

	// 删除入站流量记录
	_, err = tx.Exec("DELETE FROM inbound_traffics WHERE service_id = ?", serviceID)
	if err != nil {
		return fmt.Errorf("删除入站流量记录失败: %v", err)
	}

	// 删除客户端流量记录
	_, err = tx.Exec("DELETE FROM client_traffics WHERE service_id = ?", serviceID)
	if err != nil {
		return fmt.Errorf("删除客户端流量记录失败: %v", err)
	}

	// 删除服务记录
	_, err = tx.Exec("DELETE FROM services WHERE id = ?", serviceID)
	if err != nil {
		return fmt.Errorf("删除服务记录失败: %v", err)
	}

	log.Printf("服务ID %d 删除成功", serviceID)
	return tx.Commit()
}

// 通用：处理每日流量统计
func (d *Database) processDailyTraffic(tx *sql.Tx, table string, historyTable string, idField string, extraField string) error {
	var query string
	if table == "inbound_traffics" {
		query = `SELECT id, service_id, tag, up, down FROM inbound_traffics WHERE status = 'active'`
	} else if table == "client_traffics" {
		query = `SELECT id, service_id, email, up, down FROM client_traffics WHERE status = 'active'`
	} else {
		return fmt.Errorf("不支持的表: %s", table)
	}
	rows, err := tx.Query(query)
	if err != nil {
		return err
	}
	defer rows.Close()

	for rows.Next() {
		var id, serviceID int
		var extra string
		var dailyUp, dailyDown int64
		err := rows.Scan(&id, &serviceID, &extra, &dailyUp, &dailyDown)
		if err != nil {
			return err
		}
		if dailyUp > 0 || dailyDown > 0 {
			var insertQuery string
			if table == "inbound_traffics" {
				insertQuery = `INSERT OR REPLACE INTO inbound_traffic_history (inbound_traffic_id, service_id, tag, date, daily_up, daily_down, created_at) VALUES (?, ?, ?, DATE('now', 'localtime'), ?, ?, CURRENT_TIMESTAMP)`
				_, err = tx.Exec(insertQuery, id, serviceID, extra, dailyUp, dailyDown)
			} else {
				insertQuery = `INSERT OR REPLACE INTO client_traffic_history (client_traffic_id, service_id, email, date, daily_up, daily_down, created_at) VALUES (?, ?, ?, DATE('now', 'localtime'), ?, ?, CURRENT_TIMESTAMP)`
				_, err = tx.Exec(insertQuery, id, serviceID, extra, dailyUp, dailyDown)
			}
			if err != nil {
				return err
			}
		}
		// 清零今日流量
		_, err = tx.Exec("UPDATE "+table+" SET up = 0, down = 0 WHERE id = ?", id)
		if err != nil {
			return err
		}
	}
	return nil
}

// 每日流量统计任务（需要在每日0点执行）
func (d *Database) DailyTrafficSummary() error {
	log.Println("开始执行每日流量统计...")

	tx, err := d.db.Begin()
	if err != nil {
		return err
	}
	defer tx.Rollback()

	// 处理入站流量记录
	err = d.processDailyTraffic(tx, "inbound_traffics", "inbound_traffic_history", "tag", "tag")
	if err != nil {
		return err
	}

	// 处理客户端流量记录
	err = d.processDailyTraffic(tx, "client_traffics", "client_traffic_history", "email", "email")
	if err != nil {
		return err
	}

	log.Println("每日流量统计完成")
	return tx.Commit()
}

// 创建/更新hy2配置表（支持多条配置）
func (d *Database) InitHy2ConfigTable() error {
	sql := `
	CREATE TABLE IF NOT EXISTS hy2_config (
		id INTEGER PRIMARY KEY AUTOINCREMENT,
		source_api_password TEXT NOT NULL DEFAULT '',
		source_api_host TEXT NOT NULL DEFAULT '',
		source_api_port TEXT NOT NULL DEFAULT '',
		target_api_url TEXT NOT NULL DEFAULT ''
	);
	`
	_, err := d.db.Exec(sql)
	return err
}

// 获取全部hy2配置
func (d *Database) GetAllHy2Configs() ([]Hy2Config, error) {
	rows, err := d.db.Query(`SELECT id, source_api_password, source_api_host, source_api_port, target_api_url FROM hy2_config`)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var configs []Hy2Config
	for rows.Next() {
		var cfg Hy2Config
		err := rows.Scan(&cfg.ID, &cfg.SourceAPIPassword, &cfg.SourceAPIHost, &cfg.SourceAPIPort, &cfg.TargetAPIURL)
		if err != nil {
			return nil, err
		}
		configs = append(configs, cfg)
	}
	return configs, nil
}

// 新增hy2配置
func (d *Database) AddHy2Config(cfg *Hy2Config) error {
	_, err := d.db.Exec(`INSERT INTO hy2_config (source_api_password, source_api_host, source_api_port, target_api_url) VALUES (?, ?, ?, ?)`,
		cfg.SourceAPIPassword, cfg.SourceAPIHost, cfg.SourceAPIPort, cfg.TargetAPIURL)
	return err
}

// 更新hy2配置
func (d *Database) UpdateHy2Config(cfg *Hy2Config) error {
	_, err := d.db.Exec(`UPDATE hy2_config SET source_api_password=?, source_api_host=?, source_api_port=?, target_api_url=? WHERE id=?`,
		cfg.SourceAPIPassword, cfg.SourceAPIHost, cfg.SourceAPIPort, cfg.TargetAPIURL, cfg.ID)
	return err
}

// 删除hy2配置
func (d *Database) DeleteHy2Config(id int) error {
	_, err := d.db.Exec(`DELETE FROM hy2_config WHERE id=?`, id)
	return err
}

// 删除全部hy2配置
func (d *Database) DeleteAllHy2Configs() error {
	_, err := d.db.Exec("DELETE FROM hy2_config")
	return err
}

--- 文件内容结束 (End of Content) ---

--- 文件路径 (File Path): ./backend/database/api.go ---

package database

import (
	"database/sql"
	"fmt"
	"net/http"
	"strconv"
	"strings"
	"time"

	"github.com/gin-gonic/gin"
)

// 数据库API处理器
type DatabaseAPI struct {
	db *Database
}

// 创建数据库API处理器
func NewDatabaseAPI(db *Database) *DatabaseAPI {
	return &DatabaseAPI{db: db}
}

// 注册API路由
func (api *DatabaseAPI) RegisterRoutes(r *gin.Engine) {
	// 数据库相关API（需要认证）
	dbGroup := r.Group("/api/db")
	dbGroup.Use(AuthMiddleware()) // 添加认证中间件
	{
		// 服务管理
		dbGroup.GET("/services", api.GetServices)
		dbGroup.GET("/services/:id", api.GetServiceTraffic) // 直接使用GetServiceTraffic
		dbGroup.GET("/services/:id/traffic", api.GetServiceTraffic)
		dbGroup.DELETE("/services/:id", api.DeleteService)

		// 流量统计
		dbGroup.GET("/traffic/history", api.GetTrafficHistory)
		dbGroup.GET("/traffic/weekly/:service_id", api.GetWeeklyTraffic)
		dbGroup.GET("/traffic/monthly/:service_id", api.GetMonthlyTraffic)

		// 手动触发每日统计
		dbGroup.POST("/daily-summary", api.TriggerDailySummary)

		// 端口和用户详情
		dbGroup.GET("/port-detail/:service_id/:tag", api.GetPortDetail)
		dbGroup.GET("/user-detail/:service_id/:email", api.GetUserDetail)

		// 自定义名称管理
		dbGroup.PUT("/services/:id/custom-name", api.UpdateServiceCustomName)
		dbGroup.PUT("/inbound/:service_id/:tag/custom-name", api.UpdateInboundCustomName)
		dbGroup.PUT("/client/:service_id/:email/custom-name", api.UpdateClientCustomName)

		// 下载历史数据
		dbGroup.GET("/download/port-history/:service_id/:tag", api.DownloadPortHistory)
		dbGroup.GET("/download/user-history/:service_id/:email", api.DownloadUserHistory)
	}
}

// 获取所有服务列表
func (api *DatabaseAPI) GetServices(c *gin.Context) {
	services, err := api.db.GetServiceSummary()
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"success": false,
			"error":   "获取服务列表失败: " + err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"message": "获取服务列表成功",
		"data":    services,
	})
}

// 获取服务流量详情
func (api *DatabaseAPI) GetServiceTraffic(c *gin.Context) {
	idStr := c.Param("id")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"success": false,
			"error":   "无效的服务ID",
		})
		return
	}

	traffic, err := api.db.GetServiceTraffic(id)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"success": false,
			"error":   "获取服务流量失败: " + err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"message": "获取服务流量成功",
		"data":    traffic,
	})
}

// 删除服务及其所有相关数据
func (api *DatabaseAPI) DeleteService(c *gin.Context) {
	idStr := c.Param("id")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"success": false,
			"error":   "无效的服务ID",
		})
		return
	}

	err = api.db.DeleteService(id)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"success": false,
			"error":   "删除服务失败: " + err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"message": "服务删除成功",
		"data": gin.H{
			"deleted_service_id": id,
		},
	})
}

// 获取流量历史记录
func (api *DatabaseAPI) GetTrafficHistory(c *gin.Context) {
	// 获取查询参数
	serviceID := c.Query("service_id")
	tag := c.Query("tag")
	startDate := c.Query("start_date")
	endDate := c.Query("end_date")

	// 构建查询条件
	query := `
		SELECT 
			ith.date,
			ith.tag,
			s.ip_address AS ip,
			ith.daily_up,
			ith.daily_down,
			ith.daily_up + ith.daily_down as total_daily
		FROM inbound_traffic_history ith
		JOIN services s ON ith.service_id = s.id
		WHERE 1=1
	`
	args := []interface{}{}

	if serviceID != "" {
		query += " AND ith.service_id = ?"
		args = append(args, serviceID)
	}

	if tag != "" {
		query += " AND ith.tag = ?"
		args = append(args, tag)
	}

	if startDate != "" {
		query += " AND ith.date >= ?"
		args = append(args, startDate)
	}

	if endDate != "" {
		query += " AND ith.date <= ?"
		args = append(args, endDate)
	}

	query += " ORDER BY ith.date DESC, ith.tag"

	rows, err := api.db.db.Query(query, args...)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"success": false,
			"error":   "查询流量历史失败: " + err.Error(),
		})
		return
	}
	defer rows.Close()

	var history []map[string]interface{}
	for rows.Next() {
		var date, tag, ip string
		var dailyUp, dailyDown, totalDaily int64

		err := rows.Scan(&date, &tag, &ip, &dailyUp, &dailyDown, &totalDaily)
		if err != nil {
			continue
		}

		record := map[string]interface{}{
			"date":        date,
			"tag":         tag,
			"ip":          ip,
			"daily_up":    dailyUp,
			"daily_down":  dailyDown,
			"total_daily": totalDaily,
		}
		history = append(history, record)
	}

	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"message": "获取流量历史成功",
		"data":    history,
	})
}

// 通用：获取服务N天流量数据
func (api *DatabaseAPI) GetTrafficByDays(c *gin.Context, days int) {
	serviceIDStr := c.Param("service_id")
	serviceID, err := strconv.Atoi(serviceIDStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"success": false,
			"error":   "无效的服务ID",
		})
		return
	}

	// 获取过去N天的日期（从N-1天前到今天，今天在最右边）
	dates := make([]string, days)
	trafficData := make(map[string]map[string]int64)
	for i := 0; i < days; i++ {
		date := time.Now().In(time.Local).AddDate(0, 0, -(days - 1 - i))
		dateStr := date.Format("2006-01-02")
		dates[i] = dateStr
		trafficData[dateStr] = map[string]int64{
			"upload":   0,
			"download": 0,
		}
	}

	historyQuery := `
		SELECT 
			ith.date,
			SUM(ith.daily_up) as total_up,
			SUM(ith.daily_down) as total_down
		FROM inbound_traffic_history ith
		WHERE ith.service_id = ? AND ith.date >= DATE('now', ? || ' days', 'localtime') AND ith.date <= DATE('now', 'localtime')
		GROUP BY ith.date
		ORDER BY ith.date
	`
	// 组装参数
	param := fmt.Sprintf("-%d", days-1)
	historyRows, err := api.db.db.Query(historyQuery, serviceID, param)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"success": false,
			"error":   "查询历史流量失败: " + err.Error(),
		})
		return
	}
	defer historyRows.Close()

	for historyRows.Next() {
		var date string
		var totalUp, totalDown int64
		err := historyRows.Scan(&date, &totalUp, &totalDown)
		if err != nil {
			continue
		}
		date = strings.TrimSpace(date)
		if len(date) > 10 {
			date = date[:10]
		}
		if _, ok := trafficData[date]; ok {
			trafficData[date]["upload"] = totalUp
			trafficData[date]["download"] = totalDown
		}
	}

	uploadData := make([]int64, days)
	downloadData := make([]int64, days)
	for i, date := range dates {
		if data, exists := trafficData[date]; exists {
			uploadData[i] = data["upload"]
			downloadData[i] = data["download"]
		}
	}

	result := gin.H{
		"dates":         dates,
		"upload_data":   uploadData,
		"download_data": downloadData,
	}

	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"message": fmt.Sprintf("获取%d天流量数据成功", days),
		"data":    result,
	})
}

// 获取服务7天流量数据
func (api *DatabaseAPI) GetWeeklyTraffic(c *gin.Context) {
	api.GetTrafficByDays(c, 7)
}

// 获取服务30天流量数据
func (api *DatabaseAPI) GetMonthlyTraffic(c *gin.Context) {
	api.GetTrafficByDays(c, 30)
}

// 手动触发每日统计
func (api *DatabaseAPI) TriggerDailySummary(c *gin.Context) {
	err := api.db.DailyTrafficSummary()
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"success": false,
			"error":   "执行每日统计失败: " + err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"message": "每日统计执行成功",
		"data": gin.H{
			"executed_at": time.Now().In(time.Local).Format("2006-01-02 15:04:05"),
		},
	})
}

// 获取端口详细流量信息
func (api *DatabaseAPI) GetPortDetail(c *gin.Context) {
	serviceIDStr := c.Param("service_id")
	tag := c.Param("tag")

	if serviceIDStr == "" || tag == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"success": false,
			"error":   "缺少服务ID或端口标签参数",
		})
		return
	}

	serviceID, err := strconv.Atoi(serviceIDStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"success": false,
			"error":   "无效的服务ID",
		})
		return
	}

	// 获取端口基本信息
	var ip string
	var customName sql.NullString
	var port int
	var lastSeen string
	portQuery := `
		SELECT 
			s.ip_address AS ip,
			it.port,
			it.last_updated as last_seen,
			it.custom_name
		FROM inbound_traffics it
		JOIN services s ON it.service_id = s.id
		WHERE it.service_id = ? AND it.tag = ?
	`
	err = api.db.db.QueryRow(portQuery, serviceID, tag).Scan(
		&ip, &port, &lastSeen, &customName,
	)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{
			"success": false,
			"error":   "端口信息不存在: " + err.Error(),
		})
		return
	}

	// 查询今日流量
	var currentUp, currentDown int64
	err = api.db.db.QueryRow(`SELECT COALESCE(daily_up,0), COALESCE(daily_down,0) FROM inbound_traffic_history WHERE service_id = ? AND tag = ? AND date = DATE('now', 'localtime')`, serviceID, tag).Scan(&currentUp, &currentDown)
	if err != nil && err != sql.ErrNoRows {
		currentUp, currentDown = 0, 0
	}

	// 计算历史累计流量
	var totalUp, totalDown int64
	historySumQuery := `
		SELECT 
			COALESCE(SUM(daily_up), 0) as total_up,
			COALESCE(SUM(daily_down), 0) as total_down
		FROM inbound_traffic_history
		WHERE service_id = ? AND tag = ?
	`
	err = api.db.db.QueryRow(historySumQuery, serviceID, tag).Scan(&totalUp, &totalDown)
	if err != nil {
		totalUp = currentUp
		totalDown = currentDown
	}

	// 检查端口是否真正活跃（最近有流量）
	isActive := false
	if lastSeen != "" {
		var lastSeenTime time.Time
		timeFormats := []string{
			"2006-01-02 15:04:05",
			time.RFC3339,
			"2006-01-02T15:04:05Z",
		}
		for _, format := range timeFormats {
			if t, err := time.Parse(format, lastSeen); err == nil {
				lastSeenTime = t
				break
			}
		}
		if !lastSeenTime.IsZero() {
			timeDiff := time.Since(lastSeenTime).Seconds()
			isActive = timeDiff <= 60 && (currentUp > 0 || currentDown > 0)
		}
	}

	portInfo := map[string]interface{}{
		"ip":           ip,
		"tag":          tag,
		"port":         port,
		"total_up":     totalUp,
		"total_down":   totalDown,
		"current_up":   currentUp,
		"current_down": currentDown,
		"last_seen":    lastSeen,
		"is_active":    isActive,
		"custom_name":  customName.String,
	}

	// 获取days参数，默认7天
	days := 7
	if d := c.Query("days"); d != "" {
		if v, err := strconv.Atoi(d); err == nil && v > 0 && v <= 30 {
			days = v
		}
	}

	// 构造最近days天的日期数组
	dates := make([]string, days)
	for i := 0; i < days; i++ {
		date := time.Now().In(time.Local).AddDate(0, 0, -(days - 1 - i))
		dateStr := date.Format("2006-01-02")
		dates[i] = dateStr
	}

	// 查询历史流量，补全为0
	historyQuery := `
		SELECT date, daily_up, daily_down, daily_up + daily_down as total_daily
		FROM inbound_traffic_history
		WHERE service_id = ? AND tag = ? AND date >= DATE('now', ? || ' days', 'localtime') AND date <= DATE('now', 'localtime')
	`
	rows, err := api.db.db.Query(historyQuery, serviceID, tag, fmt.Sprintf("-%d", days-1))
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"success": false,
			"error":   "查询历史数据失败: " + err.Error(),
		})
		return
	}
	defer rows.Close()

	historyMap := make(map[string]map[string]int64)
	for rows.Next() {
		var date string
		var dailyUp, dailyDown, totalDaily int64
		err := rows.Scan(&date, &dailyUp, &dailyDown, &totalDaily)
		if err != nil {
			continue
		}
		if len(date) > 10 {
			date = date[:10]
		}
		historyMap[date] = map[string]int64{
			"daily_up":    dailyUp,
			"daily_down":  dailyDown,
			"total_daily": totalDaily,
		}
	}

	history := make([]map[string]interface{}, days)
	for i, d := range dates {
		item := map[string]interface{}{
			"date":        d,
			"daily_up":    int64(0),
			"daily_down":  int64(0),
			"total_daily": int64(0),
		}
		if v, ok := historyMap[d]; ok {
			item["daily_up"] = v["daily_up"]
			item["daily_down"] = v["daily_down"]
			item["total_daily"] = v["total_daily"]
		}
		history[i] = item
	}

	result := gin.H{
		"port_info": portInfo,
		"history":   history,
	}

	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"message": "获取端口详情成功",
		"data":    result,
	})
}

// 获取用户详细流量信息
func (api *DatabaseAPI) GetUserDetail(c *gin.Context) {
	serviceID := c.Param("service_id")
	email := c.Param("email")

	if serviceID == "" || email == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"success": false,
			"error":   "缺少服务ID或用户邮箱参数",
		})
		return
	}

	var ip string
	var userEmail string
	var inboundTag string
	var customName sql.NullString
	var lastSeen string
	var err error
	userQuery := `
		SELECT 
			s.ip_address AS ip,
			ct.email,
			'' as inbound_tag,
			ct.last_updated as last_seen,
			ct.custom_name
		FROM client_traffics ct
		JOIN services s ON ct.service_id = s.id
		WHERE ct.service_id = ? AND ct.email = ?
	`
	err = api.db.db.QueryRow(userQuery, serviceID, email).Scan(
		&ip, &userEmail, &inboundTag, &lastSeen, &customName,
	)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{
			"success": false,
			"error":   "用户信息不存在: " + err.Error(),
		})
		return
	}

	// 查询今日流量
	var currentUp, currentDown int64
	serviceIDInt, _ := strconv.Atoi(serviceID)
	err = api.db.db.QueryRow(`SELECT COALESCE(daily_up,0), COALESCE(daily_down,0) FROM client_traffic_history WHERE client_traffic_id = (SELECT id FROM client_traffics WHERE service_id = ? AND email = ?) AND date = DATE('now', 'localtime')`, serviceIDInt, email).Scan(&currentUp, &currentDown)
	if err != nil && err != sql.ErrNoRows {
		currentUp, currentDown = 0, 0
	}

	// 计算用户历史累计流量
	var totalUp, totalDown int64
	userHistorySumQuery := `
		SELECT 
			COALESCE(SUM(daily_up), 0) as total_up,
			COALESCE(SUM(daily_down), 0) as total_down
		FROM client_traffic_history
		WHERE service_id = ? AND email = ?
	`
	err = api.db.db.QueryRow(userHistorySumQuery, serviceID, email).Scan(&totalUp, &totalDown)
	if err != nil {
		totalUp = currentUp
		totalDown = currentDown
	}

	userInfo := map[string]interface{}{
		"ip":           ip,
		"email":        userEmail,
		"inbound_tag":  inboundTag,
		"total_up":     totalUp,
		"total_down":   totalDown,
		"current_up":   currentUp,
		"current_down": currentDown,
		"last_seen":    lastSeen,
		"custom_name":  customName.String,
	}

	// 获取days参数，默认7天
	days := 7
	if d := c.Query("days"); d != "" {
		if v, err := strconv.Atoi(d); err == nil && v > 0 && v <= 30 {
			days = v
		}
	}

	// 构造最近days天的日期数组
	dates := make([]string, days)
	for i := 0; i < days; i++ {
		date := time.Now().In(time.Local).AddDate(0, 0, -(days - 1 - i))
		dateStr := date.Format("2006-01-02")
		dates[i] = dateStr
	}

	// 查询历史流量，补全为0
	historyQuery := `
		SELECT date, daily_up, daily_down, daily_up + daily_down as total_daily
		FROM client_traffic_history
		WHERE service_id = ? AND email = ? AND date >= DATE('now', ? || ' days', 'localtime') AND date <= DATE('now', 'localtime')
	`
	rows, err := api.db.db.Query(historyQuery, serviceIDInt, email, fmt.Sprintf("-%d", days-1))
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"success": false,
			"error":   "查询历史数据失败: " + err.Error(),
		})
		return
	}
	defer rows.Close()

	historyMap := make(map[string]map[string]int64)
	for rows.Next() {
		var date string
		var dailyUp, dailyDown, totalDaily int64
		err := rows.Scan(&date, &dailyUp, &dailyDown, &totalDaily)
		if err != nil {
			continue
		}
		if len(date) > 10 {
			date = date[:10]
		}
		historyMap[date] = map[string]int64{
			"daily_up":    dailyUp,
			"daily_down":  dailyDown,
			"total_daily": totalDaily,
		}
	}

	history := make([]map[string]interface{}, days)
	for i, d := range dates {
		item := map[string]interface{}{
			"date":        d,
			"daily_up":    int64(0),
			"daily_down":  int64(0),
			"total_daily": int64(0),
		}
		if v, ok := historyMap[d]; ok {
			item["daily_up"] = v["daily_up"]
			item["daily_down"] = v["daily_down"]
			item["total_daily"] = v["total_daily"]
		}
		history[i] = item
	}

	result := gin.H{
		"user_info": userInfo,
		"history":   history,
	}

	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"message": "获取用户详情成功",
		"data":    result,
	})
}

// 通用：更新自定义名称
func (api *DatabaseAPI) updateCustomName(c *gin.Context, table string, idFields map[string]interface{}, customName string) {
	// 构建SQL
	setClause := "custom_name = ?"
	whereClause := ""
	args := []interface{}{customName}
	first := true
	for k, v := range idFields {
		if first {
			whereClause += k + " = ?"
			first = false
		} else {
			whereClause += " AND " + k + " = ?"
		}
		args = append(args, v)
	}
	query := "UPDATE " + table + " SET " + setClause + " WHERE " + whereClause
	_, err := api.db.db.Exec(query, args...)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"success": false,
			"error":   "更新自定义名称失败: " + err.Error(),
		})
		return
	}
	c.JSON(http.StatusOK, gin.H{
		"success":     true,
		"message":     "自定义名称更新成功",
		"data":        idFields,
		"custom_name": customName,
	})
}

// 更新服务自定义名称
func (api *DatabaseAPI) UpdateServiceCustomName(c *gin.Context) {
	idStr := c.Param("id")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"success": false,
			"error":   "无效的服务ID",
		})
		return
	}
	var request struct {
		CustomName string `json:"custom_name"`
	}
	if err := c.ShouldBindJSON(&request); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"success": false,
			"error":   "请求参数错误: " + err.Error(),
		})
		return
	}
	api.updateCustomName(c, "services", map[string]interface{}{"id": id}, request.CustomName)
}

// 更新入站端口自定义名称
func (api *DatabaseAPI) UpdateInboundCustomName(c *gin.Context) {
	serviceIDStr := c.Param("service_id")
	tag := c.Param("tag")
	serviceID, err := strconv.Atoi(serviceIDStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"success": false,
			"error":   "无效的服务ID",
		})
		return
	}
	var request struct {
		CustomName string `json:"custom_name"`
	}
	if err := c.ShouldBindJSON(&request); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"success": false,
			"error":   "请求参数错误: " + err.Error(),
		})
		return
	}
	api.updateCustomName(c, "inbound_traffics", map[string]interface{}{"service_id": serviceID, "tag": tag}, request.CustomName)
}

// 更新客户端自定义名称
func (api *DatabaseAPI) UpdateClientCustomName(c *gin.Context) {
	serviceIDStr := c.Param("service_id")
	email := c.Param("email")
	serviceID, err := strconv.Atoi(serviceIDStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"success": false,
			"error":   "无效的服务ID",
		})
		return
	}
	var request struct {
		CustomName string `json:"custom_name"`
	}
	if err := c.ShouldBindJSON(&request); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"success": false,
			"error":   "请求参数错误: " + err.Error(),
		})
		return
	}
	api.updateCustomName(c, "client_traffics", map[string]interface{}{"service_id": serviceID, "email": email}, request.CustomName)
}

// 通用：下载历史数据为CSV
func (api *DatabaseAPI) downloadHistoryCSV(c *gin.Context, query string, queryArgs []interface{}, filenamePrefix string) {
	rows, err := api.db.db.Query(query, queryArgs...)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"success": false,
			"error":   "查询历史数据失败: " + err.Error(),
		})
		return
	}
	defer rows.Close()

	var history []map[string]interface{}
	for rows.Next() {
		var date string
		var dailyUp, dailyDown, totalDaily int64
		err := rows.Scan(&date, &dailyUp, &dailyDown, &totalDaily)
		if err != nil {
			continue
		}
		record := map[string]interface{}{
			"date":        date,
			"daily_up":    dailyUp,
			"daily_down":  dailyDown,
			"total_daily": totalDaily,
		}
		history = append(history, record)
	}

	// 生成CSV内容
	csvContent := "日期,上传流量(Bytes),下载流量(Bytes),总流量(Bytes),上传流量(格式化),下载流量(格式化),总流量(格式化)\n"
	for _, record := range history {
		date := record["date"].(string)
		dailyUp := record["daily_up"].(int64)
		dailyDown := record["daily_down"].(int64)
		totalDaily := record["total_daily"].(int64)
		upFormatted := formatBytes(dailyUp)
		downFormatted := formatBytes(dailyDown)
		totalFormatted := formatBytes(totalDaily)
		csvContent += fmt.Sprintf("%s,%d,%d,%d,%s,%s,%s\n",
			date, dailyUp, dailyDown, totalDaily, upFormatted, downFormatted, totalFormatted)
	}

	filename := filenamePrefix + "_" + time.Now().In(time.Local).Format("20060102") + ".csv"
	c.Header("Content-Type", "text/csv; charset=utf-8")
	c.Header("Content-Disposition", fmt.Sprintf("attachment; filename=%s", filename))
	c.Header("Content-Length", fmt.Sprintf("%d", len(csvContent)))
	c.String(http.StatusOK, csvContent)
}

// 下载端口历史数据
func (api *DatabaseAPI) DownloadPortHistory(c *gin.Context) {
	serviceIDStr := c.Param("service_id")
	tag := c.Param("tag")
	if serviceIDStr == "" || tag == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"success": false,
			"error":   "缺少服务ID或端口标签参数",
		})
		return
	}
	serviceID, err := strconv.Atoi(serviceIDStr)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"success": false,
			"error":   "无效的服务ID",
		})
		return
	}
	// 获取端口IP
	var ip string
	portQuery := `SELECT s.ip_address AS ip FROM inbound_traffics it JOIN services s ON it.service_id = s.id WHERE it.service_id = ? AND it.tag = ?`
	err = api.db.db.QueryRow(portQuery, serviceID, tag).Scan(&ip)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{
			"success": false,
			"error":   "端口信息不存在",
		})
		return
	}
	// 查询历史数据
	historyQuery := `SELECT date, daily_up, daily_down, daily_up + daily_down as total_daily FROM inbound_traffic_history WHERE service_id = ? AND tag = ? ORDER BY date DESC`
	api.downloadHistoryCSV(c, historyQuery, []interface{}{serviceID, tag}, fmt.Sprintf("端口历史数据_%s_%s", ip, tag))
}

// 下载用户历史数据
func (api *DatabaseAPI) DownloadUserHistory(c *gin.Context) {
	serviceID := c.Param("service_id")
	email := c.Param("email")
	if serviceID == "" || email == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"success": false,
			"error":   "缺少服务ID或用户邮箱参数",
		})
		return
	}
	var ip string
	userQuery := `SELECT s.ip_address AS ip FROM client_traffics ct JOIN services s ON ct.service_id = s.id WHERE ct.service_id = ? AND ct.email = ?`
	serviceIDInt, err := strconv.Atoi(serviceID)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"success": false,
			"error":   "无效的服务ID",
		})
		return
	}
	err = api.db.db.QueryRow(userQuery, serviceIDInt, email).Scan(&ip)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{
			"success": false,
			"error":   "用户信息不存在: " + err.Error(),
		})
		return
	}
	historyQuery := `SELECT cth.date, cth.daily_up, cth.daily_down, cth.daily_up + cth.daily_down as total_daily FROM client_traffic_history cth WHERE cth.service_id = ? AND cth.email = ? ORDER BY cth.date DESC`
	api.downloadHistoryCSV(c, historyQuery, []interface{}{serviceIDInt, email}, fmt.Sprintf("用户历史数据_%s_%s", ip, email))
}

// 格式化字节数
func formatBytes(bytes int64) string {
	const unit = 1024
	if bytes < unit {
		return fmt.Sprintf("%d B", bytes)
	}
	div, exp := int64(unit), 0
	for n := bytes / unit; n >= unit; n /= unit {
		div *= unit
		exp++
	}
	return fmt.Sprintf("%.2f %cB", float64(bytes)/float64(div), "KMGTPE"[exp])
}

--- 文件内容结束 (End of Content) ---

--- 文件路径 (File Path): ./backend/tool.sh ---

#!/bin/sh

# --- 配置区 ---

# 输出文件名
OUTPUT_FILE="code_summary_for_llm.txt"

# 要包含的文件扩展名列表（用空格分隔）
# 你可以根据需要添加或删除扩展名
FILE_EXTENSIONS=".go .sql .py .js .java .html .css .ts .sh .yml .yaml .json .xml .c .cpp .h .hpp .cs .rb .php .rs .kt"

# 要忽略的目录列表（用空格分隔）
# 例如："./web/node_modules" "./some_other_dir"
EXCLUDE_DIRS="./web/node_modules" 

# --- 脚本逻辑 ---

echo "开始收集代码文件..."
echo "目标文件扩展名: ${FILE_EXTENSIONS}"
echo "要忽略的目录: ${EXCLUDE_DIRS}"
echo "输出文件: ${OUTPUT_FILE}"
echo ""

# 1. 清空或创建输出文件
# 使用 > "$OUTPUT_FILE" 来覆盖现有文件，如果文件不存在则创建它
> "$OUTPUT_FILE"
if [ $? -ne 0 ]; then
    echo "错误：无法写入输出文件 '$OUTPUT_FILE'。请检查权限。"
    exit 1
fi

# 2. 构建 find 命令的参数
# 使用 find 来递归查找文件，并根据扩展名过滤

# 构建排除目录的 find 参数
EXCLUDE_ARGS=""
for dir in $EXCLUDE_DIRS; do
    # 确保目录非空且存在，避免不必要的警告
    if [ -n "$dir" ]; then
        # -path "$dir" -prune: 匹配到该目录时，不再深入查找（prune）
        # -o: OR 逻辑，继续处理其他文件
        EXCLUDE_ARGS="$EXCLUDE_ARGS -path \"$dir\" -prune -o"
    fi
done

# 构建查找文件的 find 参数
FIND_ARGS=""
FIRST_EXT=true
for ext in $FILE_EXTENSIONS; do
    # 确保扩展名非空
    if [ -n "$ext" ]; then
        if [ "$FIRST_EXT" = true ]; then
            FIND_ARGS="-name \"*$ext\""
            FIRST_EXT=false
        else
            FIND_ARGS="$FIND_ARGS -o -name \"*$ext\""
        fi
    fi
done

# 检查是否找到了任何扩展名
if [ -z "$FIND_ARGS" ]; then
    echo "错误：未配置任何要包含的文件扩展名。"
    exit 1
fi

# 组合查找和排除的 find 命令
# .                  : 从当前目录开始查找
# \( $EXCLUDE_ARGS -false \) : 这是一个组合条件，用于处理排除的目录。
#                           -path "$dir" -prune -o 会为每个排除目录生成 `-path "dir" -prune -o`。
#                           最后的 `-false` 结合 `-o`，使得排除目录的整个表达式为真（但由于 prune，不会深入）。
# -o                 : OR 逻辑，将排除条件和查找条件分开
# -type f            : 只查找普通文件
# \( $FIND_ARGS \)  : 查找符合设定扩展名的文件
# -print0            : 使用 null 字符作为分隔符打印文件名，安全处理包含特殊字符的文件名
FIND_COMMAND="find . \( $EXCLUDE_ARGS -false \) -o -type f \( $FIND_ARGS \) -print0"

# echo "调试：find 命令: $FIND_COMMAND" # 如果需要调试，取消此行注释

# 3. 遍历找到的文件并处理
# 使用 eval 来正确执行包含特殊字符（如引号）的 FIND_COMMAND
# 使用 while IFS= read -r -d $'\0' 来安全地逐行读取 find 的输出
eval "$FIND_COMMAND" | while IFS= read -r -d $'\0' file; do
    echo "正在处理: $file"

    # 添加文件路径和分隔符到输出文件
    echo "--- 文件路径 (File Path): $file ---" >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE" # 在路径后添加空行

    # 添加文件内容到输出文件
    # 使用 cat 读取文件内容并追加 >>
    if cat "$file" >> "$OUTPUT_FILE"; then
        # 成功读取并追加内容
        echo "" >> "$OUTPUT_FILE" # 在内容后添加空行
        echo "--- 文件内容结束 (End of Content) ---" >> "$OUTPUT_FILE"
    else
        # 读取文件时可能发生错误 (例如，权限问题)
        echo "" >> "$OUTPUT_FILE" # 依然添加空行
        echo "[错误: 无法读取文件内容 - $file]" >> "$OUTPUT_FILE"
        echo "--- 文件内容结束 (End of Content) ---" >> "$OUTPUT_FILE"
    fi
     # 在每个文件条目之间添加一个空行以增加可读性
    echo "" >> "$OUTPUT_FILE"

done

# 检查 find 命令本身是否出错（例如，无法访问某些目录）
# 注意：这只能捕获 find 命令本身的错误，无法捕获 while 循环内部的 cat 错误（已在循环内处理）
# && [ ! -s "$OUTPUT_FILE" ] 是用来判断如果 find 命令本身出错，但输出文件是空的，则显示更明确的警告。
if [ $? -ne 0 ] && [ ! -s "$OUTPUT_FILE" ]; then
     echo "警告：`find` 命令执行时可能遇到问题，或者没有找到匹配的文件。"
fi

echo "----------------------------------------"
echo "代码文件汇总完成！"
echo "结果已保存到: ${OUTPUT_FILE}"
echo "请检查 '$OUTPUT_FILE' 文件。"
echo "提示：如果文件非常大，请注意可能产生的文本文件大小。"

exit 0

--- 文件内容结束 (End of Content) ---

--- 文件路径 (File Path): ./backend/main.go ---

package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"regexp"
	"strconv"
	"strings"
	"time"

	"xtrafficdash/database"

	"github.com/gin-gonic/gin"
	"github.com/sirupsen/logrus"
)

// 配置结构体
type Config struct {
	ListenPort   int    `json:"listen_port"`
	DebugMode    bool   `json:"debug_mode"`
	LogLevel     string `json:"log_level"`
	DatabasePath string `json:"database_path"`
}

// 响应数据结构体
type ResponseData struct {
	Success bool        `json:"success"`
	Message string      `json:"message"`
	Data    interface{} `json:"data,omitempty"`
	Error   string      `json:"error,omitempty"`
}

var (
	config *Config
	logger *logrus.Logger
	db     *database.Database
)

// 环境变量读取函数
func getEnv(key, defaultValue string) string {
	if value := os.Getenv(key); value != "" {
		return value
	}
	return defaultValue
}

func getEnvAsInt(key string, defaultValue int) int {
	if value := os.Getenv(key); value != "" {
		if intValue, err := strconv.Atoi(value); err == nil {
			return intValue
		}
	}
	return defaultValue
}

func getEnvAsBool(key string, defaultValue bool) bool {
	if value := os.Getenv(key); value != "" {
		return strings.ToLower(value) == "true"
	}
	return defaultValue
}

func setTimezone() {
	tz := os.Getenv("TZ")
	if tz == "" {
		tz = "Asia/Shanghai"
	}
	loc, err := time.LoadLocation(tz)
	if err != nil {
		panic("无效的时区: " + tz)
	}
	time.Local = loc
}

func init() {
	setTimezone()
	// 初始化日志
	logger = logrus.New()
	logger.SetFormatter(&logrus.JSONFormatter{})
	logger.SetOutput(os.Stdout)

	// 从环境变量读取配置
	config = &Config{
		ListenPort:   getEnvAsInt("LISTEN_PORT", 37022),
		DebugMode:    getEnvAsBool("DEBUG_MODE", false),
		LogLevel:     getEnv("LOG_LEVEL", "info"),
		DatabasePath: getEnv("DATABASE_PATH", "xtrafficdash.db"),
	}

	// 设置日志级别
	switch config.LogLevel {
	case "debug":
		logger.SetLevel(logrus.DebugLevel)
	case "info":
		logger.SetLevel(logrus.InfoLevel)
	case "warn":
		logger.SetLevel(logrus.WarnLevel)
	case "error":
		logger.SetLevel(logrus.ErrorLevel)
	default:
		logger.SetLevel(logrus.InfoLevel)
	}

	// 初始化JWT
	database.InitJWT()

	// 初始化数据库
	var err error
	db, err = database.OpenDatabase(config.DatabasePath)
	if err != nil {
		logger.Errorf("初始化数据库失败: %v", err)
	} else {
		logger.Info("数据库初始化成功")
	}

	// 初始化hy2配置表
	if db != nil {
		err := db.InitHy2ConfigTable()
		if err != nil {
			logger.Errorf("初始化hy2配置表失败: %v", err)
		}
	}
}

func main() {
	logger.Info("启动XTrafficDash...")
	logger.Infof("监听端口: %d", config.ListenPort)
	logger.Infof("数据库路径: %s", config.DatabasePath)

	// 设置Gin模式
	if config.DebugMode {
		gin.SetMode(gin.DebugMode)
	} else {
		gin.SetMode(gin.ReleaseMode)
	}

	// 创建Gin路由
	r := gin.New()

	// 使用中间件
	r.Use(gin.Logger())
	r.Use(gin.Recovery())
	r.Use(corsMiddleware())

	// 设置路由
	setupRoutes(r)

	// 启动服务器
	addr := fmt.Sprintf("0.0.0.0:%d", config.ListenPort)
	logger.Infof("服务器启动在地址 %s", addr)

	// 启动hy2流量同步定时任务（自动执行）
	go startHy2SyncTask()

	if err := r.Run(addr); err != nil {
		logger.Fatalf("服务器启动失败: %v", err)
	}
}

// 设置路由
func setupRoutes(r *gin.Engine) {
	// 健康检查
	r.GET("/health", healthCheck)
	r.GET("/api/health", healthCheck)

	// 认证相关路由（不需要认证）
	r.POST("/api/auth/login", database.HandleLogin)
	r.GET("/api/auth/verify", database.HandleVerifyToken)

	// 接收流量数据的API接口
	r.POST("/api/traffic", handleTraffic)

	// 注册数据库API路由（需要认证）
	if db != nil {
		dbAPI := database.NewDatabaseAPI(db)
		dbAPI.RegisterRoutes(r)
	}

	// 静态文件服务（用于前端）
	// 尝试多个可能的路径
	webDistPaths := []string{
		"../web/dist",   // 开发环境（从backend目录运行）
		"./web/dist",    // 开发环境（从项目根目录运行）
		"/app/web/dist", // Docker环境
	}

	var webDistPath string
	for _, path := range webDistPaths {
		if _, err := os.Stat(path); err == nil {
			webDistPath = path
			logger.Infof("找到web/dist目录: %s", path)
			break
		}
	}

	if webDistPath != "" {
		r.Static("/assets", webDistPath+"/assets")
		r.StaticFile("/", webDistPath+"/index.html")
		r.StaticFile("/favicon.svg", webDistPath+"/favicon.svg")
		r.StaticFile("/site.webmanifest", webDistPath+"/site.webmanifest")
	} else {
		logger.Warn("未找到web/dist目录，静态文件服务将不可用")
	}

	// 添加调试路由
	r.GET("/debug", func(c *gin.Context) {
		c.JSON(200, gin.H{
			"message": "Debug endpoint working",
			"time":    time.Now(),
			"path":    c.Request.URL.Path,
		})
	})

	r.GET("/api/hy2-configs", getAllHy2ConfigsHandler)
	r.POST("/api/hy2-configs", saveAllHy2ConfigsHandler)
	r.POST("/api/hy2-configs/add", addHy2ConfigHandler)
	r.POST("/api/hy2-configs/update", updateHy2ConfigHandler)
	r.DELETE("/api/hy2-configs/:id", deleteHy2ConfigHandler)

	// 处理所有其他静态文件请求
	r.NoRoute(func(c *gin.Context) {
		logger.Infof("NoRoute: %s", c.Request.URL.Path)
		// 如果不是API请求，返回index.html（用于SPA路由）
		if !strings.HasPrefix(c.Request.URL.Path, "/api") {
			c.File("/app/web/dist/index.html")
		} else {
			c.JSON(404, gin.H{"error": "API endpoint not found"})
		}
	})
}

// CORS中间件
func corsMiddleware() gin.HandlerFunc {
	return func(c *gin.Context) {
		c.Header("Access-Control-Allow-Origin", "*")
		c.Header("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
		c.Header("Access-Control-Allow-Headers", "Origin, Content-Type, Content-Length, Accept-Encoding, X-CSRF-Token, Authorization")

		if c.Request.Method == "OPTIONS" {
			c.AbortWithStatus(204)
			return
		}

		c.Next()
	}
}

// 健康检查
func healthCheck(c *gin.Context) {
	dbStatus := "disconnected"
	if db != nil {
		dbStatus = "connected"
	}

	c.JSON(200, ResponseData{
		Success: true,
		Message: "服务正常运行",
		Data: map[string]interface{}{
			"timestamp": time.Now(),
			"version":   "2.0.0",
			"status":    "healthy",
			"database":  dbStatus,
		},
	})
}

// 处理流量数据的专用处理器
func handleTraffic(c *gin.Context) {
	// 读取请求体
	bodyBytes, err := c.GetRawData()
	if err != nil {
		logger.Errorf("读取请求体失败: %v", err)
		c.JSON(400, ResponseData{
			Success: false,
			Error:   "读取请求体失败",
		})
		return
	}

	// 优先读取 X-Real-Ip header
	realIP := c.GetHeader("X-Real-Ip")
	if realIP == "" {
		realIP = c.ClientIP()
	}

	// 构建请求数据
	requestData := map[string]interface{}{
		"timestamp":    time.Now(),
		"method":       c.Request.Method,
		"path":         c.Request.URL.Path,
		"headers":      c.Request.Header,
		"query_params": c.Request.URL.Query(),
		"raw_body":     string(bodyBytes),
		"client_ip":    realIP,
		"user_agent":   c.Request.UserAgent(),
	}

	// 简化日志输出
	logger.Infof("收到流量数据请求 - IP: %s, 数据长度: %d bytes", requestData["client_ip"], len(requestData["raw_body"].(string)))

	// 处理数据库存储
	if db != nil {
		// 尝试解析为流量数据
		var trafficData database.TrafficData
		if err := json.Unmarshal(bodyBytes, &trafficData); err == nil {
			// 成功解析为流量数据，存储到数据库
			err = db.ProcessTrafficData(requestData["client_ip"].(string), requestData["user_agent"].(string), requestData["raw_body"].(string), &trafficData)
			if err != nil {
				logger.Errorf("存储流量数据失败: %v", err)
			} else {
				logger.Infof("流量数据已存储到数据库")
			}
		} else {
			logger.Warnf("请求体不是有效的流量数据格式: %v", err)
		}
	}

	c.JSON(200, ResponseData{
		Success: true,
		Message: "流量数据接收成功",
		Data: map[string]interface{}{
			"timestamp": requestData["timestamp"],
		},
	})
}

// 获取hy2配置
func getHy2ConfigHandler(c *gin.Context) {
	if db == nil {
		c.JSON(500, gin.H{"success": false, "error": "数据库未初始化"})
		return
	}
	cfgs, err := db.GetAllHy2Configs()
	if err != nil {
		c.JSON(500, gin.H{"success": false, "error": err.Error()})
		return
	}
	if len(cfgs) == 0 {
		c.JSON(404, gin.H{"success": false, "error": "未找到hy2配置"})
		return
	}
	c.JSON(200, gin.H{"success": true, "data": cfgs[0]}) // 假设只有一个hy2配置
}

// 更新hy2配置
func updateHy2ConfigHandler(c *gin.Context) {
	if db == nil {
		c.JSON(500, gin.H{"success": false, "error": "数据库未初始化"})
		return
	}
	var cfg database.Hy2Config
	if err := c.ShouldBindJSON(&cfg); err != nil {
		c.JSON(400, gin.H{"success": false, "error": "参数错误: " + err.Error()})
		return
	}
	err := db.UpdateHy2Config(&cfg)
	if err != nil {
		c.JSON(500, gin.H{"success": false, "error": err.Error()})
		return
	}
	c.JSON(200, gin.H{"success": true, "message": "保存成功"})
}

// 删除单条
func deleteHy2ConfigHandler(c *gin.Context) {
	if db == nil {
		c.JSON(500, gin.H{"success": false, "error": "数据库未初始化"})
		return
	}
	idStr := c.Param("id")
	id, err := strconv.Atoi(idStr)
	if err != nil {
		c.JSON(400, gin.H{"success": false, "error": "参数错误: id无效"})
		return
	}
	err = db.DeleteHy2Config(id)
	if err != nil {
		c.JSON(500, gin.H{"success": false, "error": err.Error()})
		return
	}
	c.JSON(200, gin.H{"success": true, "message": "删除成功"})
}

// 获取全部hy2配置
func getAllHy2ConfigsHandler(c *gin.Context) {
	if db == nil {
		c.JSON(500, gin.H{"success": false, "error": "数据库未初始化"})
		return
	}
	cfgs, err := db.GetAllHy2Configs()
	if err != nil {
		c.JSON(500, gin.H{"success": false, "error": err.Error()})
		return
	}
	c.JSON(200, gin.H{"success": true, "data": cfgs})
}

func isValidHost(host string) bool {
	if host == "" {
		return false
	}
	// 简单IP或域名校验
	ipRe := regexp.MustCompile(`^([0-9]{1,3}\.){3}[0-9]{1,3}$`)
	domainRe := regexp.MustCompile(`^([a-zA-Z0-9\-]+\.)+[a-zA-Z]{2,}$`)
	return ipRe.MatchString(host) || domainRe.MatchString(host)
}

func isValidPort(port string) bool {
	p, err := strconv.Atoi(port)
	return err == nil && p > 0 && p <= 65535
}

func isValidURL(url string) bool {
	return strings.HasPrefix(url, "http://") || strings.HasPrefix(url, "https://")
}

// 批量保存（全量覆盖）
func saveAllHy2ConfigsHandler(c *gin.Context) {
	if db == nil {
		c.JSON(500, gin.H{"success": false, "error": "数据库未初始化"})
		return
	}
	var cfgs []database.Hy2Config
	if err := c.ShouldBindJSON(&cfgs); err != nil {
		c.JSON(400, gin.H{"success": false, "error": "参数错误: " + err.Error()})
		return
	}
	// 校验
	if len(cfgs) > 0 {
		// 统一目标地址
		targetURL := cfgs[0].TargetAPIURL
		if !isValidURL(targetURL) {
			c.JSON(400, gin.H{"success": false, "error": "目标API地址无效，必须以http://或https://开头"})
			return
		}
		for i, cfg := range cfgs {
			if !isValidHost(cfg.SourceAPIHost) {
				c.JSON(400, gin.H{"success": false, "error": "第" + strconv.Itoa(i+1) + "行：hy2服务端IP/域名无效"})
				return
			}
			if !isValidPort(cfg.SourceAPIPort) {
				c.JSON(400, gin.H{"success": false, "error": "第" + strconv.Itoa(i+1) + "行：hy2服务端端口无效"})
				return
			}
			if strings.TrimSpace(cfg.SourceAPIPassword) == "" {
				c.JSON(400, gin.H{"success": false, "error": "第" + strconv.Itoa(i+1) + "行：hy2服务端密码不能为空"})
				return
			}
			if cfg.TargetAPIURL != targetURL {
				c.JSON(400, gin.H{"success": false, "error": "所有配置的目标API地址必须一致"})
				return
			}
		}
	}
	// 先清空表再插入
	err := db.DeleteAllHy2Configs()
	if err != nil {
		c.JSON(500, gin.H{"success": false, "error": err.Error()})
		return
	}
	for _, cfg := range cfgs {
		db.AddHy2Config(&cfg)
	}
	c.JSON(200, gin.H{"success": true, "message": "保存成功"})
}

// 新增单条
func addHy2ConfigHandler(c *gin.Context) {
	if db == nil {
		c.JSON(500, gin.H{"success": false, "error": "数据库未初始化"})
		return
	}
	var cfg database.Hy2Config
	if err := c.ShouldBindJSON(&cfg); err != nil {
		c.JSON(400, gin.H{"success": false, "error": "参数错误: " + err.Error()})
		return
	}
	err := db.AddHy2Config(&cfg)
	if err != nil {
		c.JSON(500, gin.H{"success": false, "error": err.Error()})
		return
	}
	c.JSON(200, gin.H{"success": true, "message": "添加成功"})
}

// hy2流量同步定时任务（自动执行，支持多配置）
func startHy2SyncTask() {
	for {
		if db == nil {
			time.Sleep(10 * time.Second)
			continue
		}
		cfgs, err := db.GetAllHy2Configs()
		if err != nil {
			logger.Errorf("读取hy2配置失败: %v", err)
			time.Sleep(10 * time.Second)
			continue
		}

		// 如果没有配置，跳过本次执行
		if len(cfgs) == 0 {
			time.Sleep(10 * time.Second)
			continue
		}

		// 从第一个配置中获取目标地址，所有配置共享同一个目标
		targetURL := cfgs[0].TargetAPIURL
		if targetURL == "" {
			logger.Warnf("[HY2] 目标地址为空，跳过本次同步")
			time.Sleep(10 * time.Second)
			continue
		}

		// 为每个配置执行同步，但都发送到同一个目标地址
		for _, cfg := range cfgs {
			// 跳过无效配置
			if cfg.SourceAPIHost == "" || cfg.SourceAPIPort == "" || cfg.SourceAPIPassword == "" {
				continue
			}

			// 创建配置副本，使用统一的目标地址
			syncCfg := database.Hy2Config{
				ID:                cfg.ID,
				SourceAPIPassword: cfg.SourceAPIPassword,
				SourceAPIHost:     cfg.SourceAPIHost,
				SourceAPIPort:     cfg.SourceAPIPort,
				TargetAPIURL:      targetURL, // 使用统一的目标地址
			}

			go hy2SyncOnce(&syncCfg)
		}
		time.Sleep(10 * time.Second)
	}
}

// hy2流量同步单次执行逻辑
func hy2SyncOnce(cfg *database.Hy2Config) {
	client := &http.Client{Timeout: 15 * time.Second}
	// 构建源API URL
	sourceURL := "http://" + cfg.SourceAPIHost + ":" + cfg.SourceAPIPort + "/traffic?clear=1"
	// 1. 拉取源API流量
	req, err := http.NewRequest("GET", sourceURL, nil)
	if err != nil {
		logger.Errorf("[HY2] 创建请求失败: %v", err)
		return
	}
	req.Header.Set("Authorization", cfg.SourceAPIPassword)
	resp, err := client.Do(req)
	if err != nil {
		logger.Errorf("[HY2] 请求源API失败: %v", err)
		return
	}
	defer resp.Body.Close()
	if resp.StatusCode != 200 {
		body, _ := io.ReadAll(resp.Body)
		logger.Errorf("[HY2] 源API返回状态码: %d, 响应: %s", resp.StatusCode, string(body))
		return
	}

	var raw struct {
		User struct {
			Tx int64 `json:"tx"`
			Rx int64 `json:"rx"`
		} `json:"user"`
	}
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		logger.Errorf("[HY2] 读取源API响应失败: %v", err)
		return
	}
	if err := json.Unmarshal(body, &raw); err != nil {
		logger.Errorf("[HY2] 解析源API响应失败: %v", err)
		return
	}
	logger.Infof("[HY2] 获取到流量数据: tx=%d, rx=%d", raw.User.Tx, raw.User.Rx)

	// 2. 转换格式
	postData := map[string]interface{}{
		"inboundTraffics": []map[string]interface{}{
			{
				"IsInbound":  true,
				"IsOutbound": false,
				"Tag":        "hysteria2",
				"Up":         raw.User.Tx,
				"Down":       raw.User.Rx,
			},
		},
	}
	jsonBytes, _ := json.Marshal(postData)

	// 3. POST到目标API
	postReq, err := http.NewRequest("POST", cfg.TargetAPIURL, bytes.NewBuffer(jsonBytes))
	if err != nil {
		logger.Errorf("[HY2] 创建POST请求失败: %v", err)
		return
	}
	postReq.Header.Set("Content-Type", "application/json")
	// 新增：带上真实IP
	postReq.Header.Set("X-Real-Ip", cfg.SourceAPIHost)
	postResp, err := client.Do(postReq)
	if err != nil {
		logger.Errorf("[HY2] 发送POST到目标API失败: %v", err)
		return
	}
	defer postResp.Body.Close()
	if postResp.StatusCode != 200 {
		respBody, _ := io.ReadAll(postResp.Body)
		logger.Errorf("[HY2] 目标API返回状态码: %d, 响应: %s", postResp.StatusCode, string(respBody))
		return
	}
	logger.Infof("[HY2] 流量数据已成功推送到目标API")
}

--- 文件内容结束 (End of Content) ---

--- 文件路径 (File Path): ./tool.sh ---

#!/bin/sh

# --- 配置区 ---

# 输出文件名
OUTPUT_FILE="code_summary_for_llm.txt"

# 要包含的文件扩展名列表（用空格分隔）
# 你可以根据需要添加或删除扩展名
FILE_EXTENSIONS=".go .sql .py .js .java .html .css .ts .sh .yml .yaml .json .xml .c .cpp .h .hpp .cs .rb .php .rs .kt"

# 要忽略的目录列表（用空格分隔）
# 例如："./web/node_modules" "./some_other_dir"
EXCLUDE_DIRS="./web/node_modules" 

# --- 脚本逻辑 ---

echo "开始收集代码文件..."
echo "目标文件扩展名: ${FILE_EXTENSIONS}"
echo "要忽略的目录: ${EXCLUDE_DIRS}"
echo "输出文件: ${OUTPUT_FILE}"
echo ""

# 1. 清空或创建输出文件
# 使用 > "$OUTPUT_FILE" 来覆盖现有文件，如果文件不存在则创建它
> "$OUTPUT_FILE"
if [ $? -ne 0 ]; then
    echo "错误：无法写入输出文件 '$OUTPUT_FILE'。请检查权限。"
    exit 1
fi

# 2. 构建 find 命令的参数
# 使用 find 来递归查找文件，并根据扩展名过滤

# 构建排除目录的 find 参数
EXCLUDE_ARGS=""
for dir in $EXCLUDE_DIRS; do
    # 确保目录非空且存在，避免不必要的警告
    if [ -n "$dir" ]; then
        # -path "$dir" -prune: 匹配到该目录时，不再深入查找（prune）
        # -o: OR 逻辑，继续处理其他文件
        EXCLUDE_ARGS="$EXCLUDE_ARGS -path \"$dir\" -prune -o"
    fi
done

# 构建查找文件的 find 参数
FIND_ARGS=""
FIRST_EXT=true
for ext in $FILE_EXTENSIONS; do
    # 确保扩展名非空
    if [ -n "$ext" ]; then
        if [ "$FIRST_EXT" = true ]; then
            FIND_ARGS="-name \"*$ext\""
            FIRST_EXT=false
        else
            FIND_ARGS="$FIND_ARGS -o -name \"*$ext\""
        fi
    fi
done

# 检查是否找到了任何扩展名
if [ -z "$FIND_ARGS" ]; then
    echo "错误：未配置任何要包含的文件扩展名。"
    exit 1
fi

# 组合查找和排除的 find 命令
# .                  : 从当前目录开始查找
# \( $EXCLUDE_ARGS -false \) : 这是一个组合条件，用于处理排除的目录。
#                           -path "$dir" -prune -o 会为每个排除目录生成 `-path "dir" -prune -o`。
#                           最后的 `-false` 结合 `-o`，使得排除目录的整个表达式为真（但由于 prune，不会深入）。
# -o                 : OR 逻辑，将排除条件和查找条件分开
# -type f            : 只查找普通文件
# \( $FIND_ARGS \)  : 查找符合设定扩展名的文件
# -print0            : 使用 null 字符作为分隔符打印文件名，安全处理包含特殊字符的文件名
FIND_COMMAND="find . \( $EXCLUDE_ARGS -false \) -o -type f \( $FIND_ARGS \) -print0"

# echo "调试：find 命令: $FIND_COMMAND" # 如果需要调试，取消此行注释

# 3. 遍历找到的文件并处理
# 使用 eval 来正确执行包含特殊字符（如引号）的 FIND_COMMAND
# 使用 while IFS= read -r -d $'\0' 来安全地逐行读取 find 的输出
eval "$FIND_COMMAND" | while IFS= read -r -d $'\0' file; do
    echo "正在处理: $file"

    # 添加文件路径和分隔符到输出文件
    echo "--- 文件路径 (File Path): $file ---" >> "$OUTPUT_FILE"
    echo "" >> "$OUTPUT_FILE" # 在路径后添加空行

    # 添加文件内容到输出文件
    # 使用 cat 读取文件内容并追加 >>
    if cat "$file" >> "$OUTPUT_FILE"; then
        # 成功读取并追加内容
        echo "" >> "$OUTPUT_FILE" # 在内容后添加空行
        echo "--- 文件内容结束 (End of Content) ---" >> "$OUTPUT_FILE"
    else
        # 读取文件时可能发生错误 (例如，权限问题)
        echo "" >> "$OUTPUT_FILE" # 依然添加空行
        echo "[错误: 无法读取文件内容 - $file]" >> "$OUTPUT_FILE"
        echo "--- 文件内容结束 (End of Content) ---" >> "$OUTPUT_FILE"
    fi
     # 在每个文件条目之间添加一个空行以增加可读性
    echo "" >> "$OUTPUT_FILE"

done

# 检查 find 命令本身是否出错（例如，无法访问某些目录）
# 注意：这只能捕获 find 命令本身的错误，无法捕获 while 循环内部的 cat 错误（已在循环内处理）
# && [ ! -s "$OUTPUT_FILE" ] 是用来判断如果 find 命令本身出错，但输出文件是空的，则显示更明确的警告。
if [ $? -ne 0 ] && [ ! -s "$OUTPUT_FILE" ]; then
     echo "警告：`find` 命令执行时可能遇到问题，或者没有找到匹配的文件。"
fi

echo "----------------------------------------"
echo "代码文件汇总完成！"
echo "结果已保存到: ${OUTPUT_FILE}"
echo "请检查 '$OUTPUT_FILE' 文件。"
echo "提示：如果文件非常大，请注意可能产生的文本文件大小。"

exit 0

--- 文件内容结束 (End of Content) ---

--- 文件路径 (File Path): ./configs/docker-compose.yml ---

version: '3.8'

services:
  xtrafficdash:
    build: 
      context: ..
      dockerfile: Dockerfile
    container_name: xtrafficdash
    ports:
      - "37022:37022"
    environment:
      - X_UI_PASSWORD=${X_UI_PASSWORD:-admin123}
      - DATABASE_PATH=/app/data/xtrafficdash.db
      - DEBUG_MODE=${DEBUG_MODE:-true}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LISTEN_PORT=37022
    volumes:
      - ../data:/app/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:37022/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s 
--- 文件内容结束 (End of Content) ---

--- 文件路径 (File Path): ./.github/workflows/docker-build-push.yml ---

# 工作流名称
name: CI-CD - Build and Push Docker Image

# 触发工作流的事件
on:
  push:
    tags:
      - 'v*'  # 只在推送 v 开头的标签时触发，如 v1.0.0, v2.1.3
  workflow_dispatch: # 允许手动触发

# 工作流执行的任务
jobs:
  build-and-push:
    # 任务运行的环境
    runs-on: ubuntu-latest

    # 任务执行的步骤
    steps:
      # 步骤 1: 检出代码
      - name: Checkout repository
        uses: actions/checkout@v4

      # 步骤 2: 登录到 Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 步骤 3: 提取元数据（标签和注释）
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: docker.io/sanqi37/xtrafficdash
          tags: |
            # 使用 Git 标签作为 Docker 标签（去掉 v 前缀）
            type=ref,event=tag
            # 生成 latest 标签（仅对最新版本）
            type=raw,value=latest,enable={{is_default_branch}}
            # 生成 major 标签（如 v1.0.0 -> 1）
            type=semver,pattern={{major}}
            # 生成 major.minor 标签（如 v1.0.0 -> 1.0）
            type=semver,pattern={{major}}.{{minor}}

      # 步骤 4: 设置 Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 步骤 5: 构建并推送到 Docker Hub
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


--- 文件内容结束 (End of Content) ---

--- 文件路径 (File Path): ./docker-compose.yml ---

version: '3.8'

services:
  xtrafficdash:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: xtrafficdash
    restart: unless-stopped
    ports:
      - "37022:37022"
    environment:
      - LISTEN_PORT=37022
      - DATABASE_PATH=/app/data/xtrafficdash.db
      - PASSWORD=${PASSWORD:-admin123}  # 后端登录密码和JWT密钥基础，必须设置
      - DEBUG_MODE=${DEBUG_MODE:-false}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    networks:
      - xui_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:37022/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s


volumes:
  xtrafficdash_data:
    driver: local

networks:
  xtrafficdash_network:
    driver: bridge 
--- 文件内容结束 (End of Content) ---


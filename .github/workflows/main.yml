name: Build and Release

on:
  push:
    branches:
      - main  # 或者你的主分支名称，如 master

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-22.04  # 已更改为 ubuntu-22.04

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      # 后端 Go 构建
      - name: 设置 Go 环境
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: 编译 Go 后端 (Linux amd64, 静态链接)
        run: |
          cd backend
          go mod tidy
          CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o xtrafficdash

      # 前端 Vue 构建
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 安装前端依赖并构建
        run: |
          cd web
          npm ci
          npm run build

      - name: 打包前端 dist 目录
        run: |
          cd web
          zip -r ../dist.zip dist

      # 打包发布
      - name: 打包发布文件
        run: |
          mkdir release
          cp backend/x-ui-backend release/
          cp -r web/dist release/web-dist

      # 注意：softprops/action-gh-release@v2 默认会上传所有在指定路径下的文件。
      # 如果您只想上传特定的文件，可以这样配置：
      - name: 创建 Release 并上传资源
        uses: softprops/action-gh-release@v2
        with:
          files: |
            xtrafficdash
            dist.zip
            # 如果 web/dist 目录已经打包成 dist.zip，则不需要再次上传 dist.zip
            # 如果您想上传打包后的 release 目录内的所有文件，可以使用通配符
            release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

